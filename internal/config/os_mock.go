// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package config

//go:generate minimock -i github.com/robertobadjio/tgtime-notifier/internal/config.OS -o os_mock.go -n OSMock -p config

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OSMock implements OS
type OSMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetenv          func(key string) (s1 string)
	funcGetenvOrigin    string
	inspectFuncGetenv   func(key string)
	afterGetenvCounter  uint64
	beforeGetenvCounter uint64
	GetenvMock          mOSMockGetenv
}

// NewOSMock returns a mock for OS
func NewOSMock(t minimock.Tester) *OSMock {
	m := &OSMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetenvMock = mOSMockGetenv{mock: m}
	m.GetenvMock.callArgs = []*OSMockGetenvParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOSMockGetenv struct {
	optional           bool
	mock               *OSMock
	defaultExpectation *OSMockGetenvExpectation
	expectations       []*OSMockGetenvExpectation

	callArgs []*OSMockGetenvParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OSMockGetenvExpectation specifies expectation struct of the OS.Getenv
type OSMockGetenvExpectation struct {
	mock               *OSMock
	params             *OSMockGetenvParams
	paramPtrs          *OSMockGetenvParamPtrs
	expectationOrigins OSMockGetenvExpectationOrigins
	results            *OSMockGetenvResults
	returnOrigin       string
	Counter            uint64
}

// OSMockGetenvParams contains parameters of the OS.Getenv
type OSMockGetenvParams struct {
	key string
}

// OSMockGetenvParamPtrs contains pointers to parameters of the OS.Getenv
type OSMockGetenvParamPtrs struct {
	key *string
}

// OSMockGetenvResults contains results of the OS.Getenv
type OSMockGetenvResults struct {
	s1 string
}

// OSMockGetenvOrigins contains origins of expectations of the OS.Getenv
type OSMockGetenvExpectationOrigins struct {
	origin    string
	originKey string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetenv *mOSMockGetenv) Optional() *mOSMockGetenv {
	mmGetenv.optional = true
	return mmGetenv
}

// Expect sets up expected params for OS.Getenv
func (mmGetenv *mOSMockGetenv) Expect(key string) *mOSMockGetenv {
	if mmGetenv.mock.funcGetenv != nil {
		mmGetenv.mock.t.Fatalf("OSMock.Getenv mock is already set by Set")
	}

	if mmGetenv.defaultExpectation == nil {
		mmGetenv.defaultExpectation = &OSMockGetenvExpectation{}
	}

	if mmGetenv.defaultExpectation.paramPtrs != nil {
		mmGetenv.mock.t.Fatalf("OSMock.Getenv mock is already set by ExpectParams functions")
	}

	mmGetenv.defaultExpectation.params = &OSMockGetenvParams{key}
	mmGetenv.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetenv.expectations {
		if minimock.Equal(e.params, mmGetenv.defaultExpectation.params) {
			mmGetenv.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetenv.defaultExpectation.params)
		}
	}

	return mmGetenv
}

// ExpectKeyParam1 sets up expected param key for OS.Getenv
func (mmGetenv *mOSMockGetenv) ExpectKeyParam1(key string) *mOSMockGetenv {
	if mmGetenv.mock.funcGetenv != nil {
		mmGetenv.mock.t.Fatalf("OSMock.Getenv mock is already set by Set")
	}

	if mmGetenv.defaultExpectation == nil {
		mmGetenv.defaultExpectation = &OSMockGetenvExpectation{}
	}

	if mmGetenv.defaultExpectation.params != nil {
		mmGetenv.mock.t.Fatalf("OSMock.Getenv mock is already set by Expect")
	}

	if mmGetenv.defaultExpectation.paramPtrs == nil {
		mmGetenv.defaultExpectation.paramPtrs = &OSMockGetenvParamPtrs{}
	}
	mmGetenv.defaultExpectation.paramPtrs.key = &key
	mmGetenv.defaultExpectation.expectationOrigins.originKey = minimock.CallerInfo(1)

	return mmGetenv
}

// Inspect accepts an inspector function that has same arguments as the OS.Getenv
func (mmGetenv *mOSMockGetenv) Inspect(f func(key string)) *mOSMockGetenv {
	if mmGetenv.mock.inspectFuncGetenv != nil {
		mmGetenv.mock.t.Fatalf("Inspect function is already set for OSMock.Getenv")
	}

	mmGetenv.mock.inspectFuncGetenv = f

	return mmGetenv
}

// Return sets up results that will be returned by OS.Getenv
func (mmGetenv *mOSMockGetenv) Return(s1 string) *OSMock {
	if mmGetenv.mock.funcGetenv != nil {
		mmGetenv.mock.t.Fatalf("OSMock.Getenv mock is already set by Set")
	}

	if mmGetenv.defaultExpectation == nil {
		mmGetenv.defaultExpectation = &OSMockGetenvExpectation{mock: mmGetenv.mock}
	}
	mmGetenv.defaultExpectation.results = &OSMockGetenvResults{s1}
	mmGetenv.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetenv.mock
}

// Set uses given function f to mock the OS.Getenv method
func (mmGetenv *mOSMockGetenv) Set(f func(key string) (s1 string)) *OSMock {
	if mmGetenv.defaultExpectation != nil {
		mmGetenv.mock.t.Fatalf("Default expectation is already set for the OS.Getenv method")
	}

	if len(mmGetenv.expectations) > 0 {
		mmGetenv.mock.t.Fatalf("Some expectations are already set for the OS.Getenv method")
	}

	mmGetenv.mock.funcGetenv = f
	mmGetenv.mock.funcGetenvOrigin = minimock.CallerInfo(1)
	return mmGetenv.mock
}

// When sets expectation for the OS.Getenv which will trigger the result defined by the following
// Then helper
func (mmGetenv *mOSMockGetenv) When(key string) *OSMockGetenvExpectation {
	if mmGetenv.mock.funcGetenv != nil {
		mmGetenv.mock.t.Fatalf("OSMock.Getenv mock is already set by Set")
	}

	expectation := &OSMockGetenvExpectation{
		mock:               mmGetenv.mock,
		params:             &OSMockGetenvParams{key},
		expectationOrigins: OSMockGetenvExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetenv.expectations = append(mmGetenv.expectations, expectation)
	return expectation
}

// Then sets up OS.Getenv return parameters for the expectation previously defined by the When method
func (e *OSMockGetenvExpectation) Then(s1 string) *OSMock {
	e.results = &OSMockGetenvResults{s1}
	return e.mock
}

// Times sets number of times OS.Getenv should be invoked
func (mmGetenv *mOSMockGetenv) Times(n uint64) *mOSMockGetenv {
	if n == 0 {
		mmGetenv.mock.t.Fatalf("Times of OSMock.Getenv mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetenv.expectedInvocations, n)
	mmGetenv.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetenv
}

func (mmGetenv *mOSMockGetenv) invocationsDone() bool {
	if len(mmGetenv.expectations) == 0 && mmGetenv.defaultExpectation == nil && mmGetenv.mock.funcGetenv == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetenv.mock.afterGetenvCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetenv.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Getenv implements OS
func (mmGetenv *OSMock) Getenv(key string) (s1 string) {
	mm_atomic.AddUint64(&mmGetenv.beforeGetenvCounter, 1)
	defer mm_atomic.AddUint64(&mmGetenv.afterGetenvCounter, 1)

	mmGetenv.t.Helper()

	if mmGetenv.inspectFuncGetenv != nil {
		mmGetenv.inspectFuncGetenv(key)
	}

	mm_params := OSMockGetenvParams{key}

	// Record call args
	mmGetenv.GetenvMock.mutex.Lock()
	mmGetenv.GetenvMock.callArgs = append(mmGetenv.GetenvMock.callArgs, &mm_params)
	mmGetenv.GetenvMock.mutex.Unlock()

	for _, e := range mmGetenv.GetenvMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmGetenv.GetenvMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetenv.GetenvMock.defaultExpectation.Counter, 1)
		mm_want := mmGetenv.GetenvMock.defaultExpectation.params
		mm_want_ptrs := mmGetenv.GetenvMock.defaultExpectation.paramPtrs

		mm_got := OSMockGetenvParams{key}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.key != nil && !minimock.Equal(*mm_want_ptrs.key, mm_got.key) {
				mmGetenv.t.Errorf("OSMock.Getenv got unexpected parameter key, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetenv.GetenvMock.defaultExpectation.expectationOrigins.originKey, *mm_want_ptrs.key, mm_got.key, minimock.Diff(*mm_want_ptrs.key, mm_got.key))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetenv.t.Errorf("OSMock.Getenv got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetenv.GetenvMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetenv.GetenvMock.defaultExpectation.results
		if mm_results == nil {
			mmGetenv.t.Fatal("No results are set for the OSMock.Getenv")
		}
		return (*mm_results).s1
	}
	if mmGetenv.funcGetenv != nil {
		return mmGetenv.funcGetenv(key)
	}
	mmGetenv.t.Fatalf("Unexpected call to OSMock.Getenv. %v", key)
	return
}

// GetenvAfterCounter returns a count of finished OSMock.Getenv invocations
func (mmGetenv *OSMock) GetenvAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetenv.afterGetenvCounter)
}

// GetenvBeforeCounter returns a count of OSMock.Getenv invocations
func (mmGetenv *OSMock) GetenvBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetenv.beforeGetenvCounter)
}

// Calls returns a list of arguments used in each call to OSMock.Getenv.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetenv *mOSMockGetenv) Calls() []*OSMockGetenvParams {
	mmGetenv.mutex.RLock()

	argCopy := make([]*OSMockGetenvParams, len(mmGetenv.callArgs))
	copy(argCopy, mmGetenv.callArgs)

	mmGetenv.mutex.RUnlock()

	return argCopy
}

// MinimockGetenvDone returns true if the count of the Getenv invocations corresponds
// the number of defined expectations
func (m *OSMock) MinimockGetenvDone() bool {
	if m.GetenvMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetenvMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetenvMock.invocationsDone()
}

// MinimockGetenvInspect logs each unmet expectation
func (m *OSMock) MinimockGetenvInspect() {
	for _, e := range m.GetenvMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OSMock.Getenv at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetenvCounter := mm_atomic.LoadUint64(&m.afterGetenvCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetenvMock.defaultExpectation != nil && afterGetenvCounter < 1 {
		if m.GetenvMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OSMock.Getenv at\n%s", m.GetenvMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OSMock.Getenv at\n%s with params: %#v", m.GetenvMock.defaultExpectation.expectationOrigins.origin, *m.GetenvMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetenv != nil && afterGetenvCounter < 1 {
		m.t.Errorf("Expected call to OSMock.Getenv at\n%s", m.funcGetenvOrigin)
	}

	if !m.GetenvMock.invocationsDone() && afterGetenvCounter > 0 {
		m.t.Errorf("Expected %d calls to OSMock.Getenv at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetenvMock.expectedInvocations), m.GetenvMock.expectedInvocationsOrigin, afterGetenvCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OSMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetenvInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OSMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OSMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetenvDone()
}
