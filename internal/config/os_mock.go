// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package config

//go:generate minimock -i github.com/robertobadjio/tgtime-notifier/internal/config.OS -o os_mock.go -n OSMock -p config

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OSMock implements OS
type OSMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetEnv          func(key string) (s1 string)
	funcGetEnvOrigin    string
	inspectFuncGetEnv   func(key string)
	afterGetEnvCounter  uint64
	beforeGetEnvCounter uint64
	GetEnvMock          mOSMockGetEnv
}

// NewOSMock returns a mock for OS
func NewOSMock(t minimock.Tester) *OSMock {
	m := &OSMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetEnvMock = mOSMockGetEnv{mock: m}
	m.GetEnvMock.callArgs = []*OSMockGetEnvParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOSMockGetEnv struct {
	optional           bool
	mock               *OSMock
	defaultExpectation *OSMockGetEnvExpectation
	expectations       []*OSMockGetEnvExpectation

	callArgs []*OSMockGetEnvParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OSMockGetEnvExpectation specifies expectation struct of the OS.GetEnv
type OSMockGetEnvExpectation struct {
	mock               *OSMock
	params             *OSMockGetEnvParams
	paramPtrs          *OSMockGetEnvParamPtrs
	expectationOrigins OSMockGetEnvExpectationOrigins
	results            *OSMockGetEnvResults
	returnOrigin       string
	Counter            uint64
}

// OSMockGetEnvParams contains parameters of the OS.GetEnv
type OSMockGetEnvParams struct {
	key string
}

// OSMockGetEnvParamPtrs contains pointers to parameters of the OS.GetEnv
type OSMockGetEnvParamPtrs struct {
	key *string
}

// OSMockGetEnvResults contains results of the OS.GetEnv
type OSMockGetEnvResults struct {
	s1 string
}

// OSMockGetEnvOrigins contains origins of expectations of the OS.GetEnv
type OSMockGetEnvExpectationOrigins struct {
	origin    string
	originKey string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetEnv *mOSMockGetEnv) Optional() *mOSMockGetEnv {
	mmGetEnv.optional = true
	return mmGetEnv
}

// Expect sets up expected params for OS.GetEnv
func (mmGetEnv *mOSMockGetEnv) Expect(key string) *mOSMockGetEnv {
	if mmGetEnv.mock.funcGetEnv != nil {
		mmGetEnv.mock.t.Fatalf("OSMock.GetEnv mock is already set by Set")
	}

	if mmGetEnv.defaultExpectation == nil {
		mmGetEnv.defaultExpectation = &OSMockGetEnvExpectation{}
	}

	if mmGetEnv.defaultExpectation.paramPtrs != nil {
		mmGetEnv.mock.t.Fatalf("OSMock.GetEnv mock is already set by ExpectParams functions")
	}

	mmGetEnv.defaultExpectation.params = &OSMockGetEnvParams{key}
	mmGetEnv.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetEnv.expectations {
		if minimock.Equal(e.params, mmGetEnv.defaultExpectation.params) {
			mmGetEnv.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetEnv.defaultExpectation.params)
		}
	}

	return mmGetEnv
}

// ExpectKeyParam1 sets up expected param key for OS.GetEnv
func (mmGetEnv *mOSMockGetEnv) ExpectKeyParam1(key string) *mOSMockGetEnv {
	if mmGetEnv.mock.funcGetEnv != nil {
		mmGetEnv.mock.t.Fatalf("OSMock.GetEnv mock is already set by Set")
	}

	if mmGetEnv.defaultExpectation == nil {
		mmGetEnv.defaultExpectation = &OSMockGetEnvExpectation{}
	}

	if mmGetEnv.defaultExpectation.params != nil {
		mmGetEnv.mock.t.Fatalf("OSMock.GetEnv mock is already set by Expect")
	}

	if mmGetEnv.defaultExpectation.paramPtrs == nil {
		mmGetEnv.defaultExpectation.paramPtrs = &OSMockGetEnvParamPtrs{}
	}
	mmGetEnv.defaultExpectation.paramPtrs.key = &key
	mmGetEnv.defaultExpectation.expectationOrigins.originKey = minimock.CallerInfo(1)

	return mmGetEnv
}

// Inspect accepts an inspector function that has same arguments as the OS.GetEnv
func (mmGetEnv *mOSMockGetEnv) Inspect(f func(key string)) *mOSMockGetEnv {
	if mmGetEnv.mock.inspectFuncGetEnv != nil {
		mmGetEnv.mock.t.Fatalf("Inspect function is already set for OSMock.GetEnv")
	}

	mmGetEnv.mock.inspectFuncGetEnv = f

	return mmGetEnv
}

// Return sets up results that will be returned by OS.GetEnv
func (mmGetEnv *mOSMockGetEnv) Return(s1 string) *OSMock {
	if mmGetEnv.mock.funcGetEnv != nil {
		mmGetEnv.mock.t.Fatalf("OSMock.GetEnv mock is already set by Set")
	}

	if mmGetEnv.defaultExpectation == nil {
		mmGetEnv.defaultExpectation = &OSMockGetEnvExpectation{mock: mmGetEnv.mock}
	}
	mmGetEnv.defaultExpectation.results = &OSMockGetEnvResults{s1}
	mmGetEnv.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetEnv.mock
}

// Set uses given function f to mock the OS.GetEnv method
func (mmGetEnv *mOSMockGetEnv) Set(f func(key string) (s1 string)) *OSMock {
	if mmGetEnv.defaultExpectation != nil {
		mmGetEnv.mock.t.Fatalf("Default expectation is already set for the OS.GetEnv method")
	}

	if len(mmGetEnv.expectations) > 0 {
		mmGetEnv.mock.t.Fatalf("Some expectations are already set for the OS.GetEnv method")
	}

	mmGetEnv.mock.funcGetEnv = f
	mmGetEnv.mock.funcGetEnvOrigin = minimock.CallerInfo(1)
	return mmGetEnv.mock
}

// When sets expectation for the OS.GetEnv which will trigger the result defined by the following
// Then helper
func (mmGetEnv *mOSMockGetEnv) When(key string) *OSMockGetEnvExpectation {
	if mmGetEnv.mock.funcGetEnv != nil {
		mmGetEnv.mock.t.Fatalf("OSMock.GetEnv mock is already set by Set")
	}

	expectation := &OSMockGetEnvExpectation{
		mock:               mmGetEnv.mock,
		params:             &OSMockGetEnvParams{key},
		expectationOrigins: OSMockGetEnvExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetEnv.expectations = append(mmGetEnv.expectations, expectation)
	return expectation
}

// Then sets up OS.GetEnv return parameters for the expectation previously defined by the When method
func (e *OSMockGetEnvExpectation) Then(s1 string) *OSMock {
	e.results = &OSMockGetEnvResults{s1}
	return e.mock
}

// Times sets number of times OS.GetEnv should be invoked
func (mmGetEnv *mOSMockGetEnv) Times(n uint64) *mOSMockGetEnv {
	if n == 0 {
		mmGetEnv.mock.t.Fatalf("Times of OSMock.GetEnv mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetEnv.expectedInvocations, n)
	mmGetEnv.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetEnv
}

func (mmGetEnv *mOSMockGetEnv) invocationsDone() bool {
	if len(mmGetEnv.expectations) == 0 && mmGetEnv.defaultExpectation == nil && mmGetEnv.mock.funcGetEnv == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetEnv.mock.afterGetEnvCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetEnv.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetEnv implements OS
func (mmGetEnv *OSMock) GetEnv(key string) (s1 string) {
	mm_atomic.AddUint64(&mmGetEnv.beforeGetEnvCounter, 1)
	defer mm_atomic.AddUint64(&mmGetEnv.afterGetEnvCounter, 1)

	mmGetEnv.t.Helper()

	if mmGetEnv.inspectFuncGetEnv != nil {
		mmGetEnv.inspectFuncGetEnv(key)
	}

	mm_params := OSMockGetEnvParams{key}

	// Record call args
	mmGetEnv.GetEnvMock.mutex.Lock()
	mmGetEnv.GetEnvMock.callArgs = append(mmGetEnv.GetEnvMock.callArgs, &mm_params)
	mmGetEnv.GetEnvMock.mutex.Unlock()

	for _, e := range mmGetEnv.GetEnvMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmGetEnv.GetEnvMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetEnv.GetEnvMock.defaultExpectation.Counter, 1)
		mm_want := mmGetEnv.GetEnvMock.defaultExpectation.params
		mm_want_ptrs := mmGetEnv.GetEnvMock.defaultExpectation.paramPtrs

		mm_got := OSMockGetEnvParams{key}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.key != nil && !minimock.Equal(*mm_want_ptrs.key, mm_got.key) {
				mmGetEnv.t.Errorf("OSMock.GetEnv got unexpected parameter key, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetEnv.GetEnvMock.defaultExpectation.expectationOrigins.originKey, *mm_want_ptrs.key, mm_got.key, minimock.Diff(*mm_want_ptrs.key, mm_got.key))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetEnv.t.Errorf("OSMock.GetEnv got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetEnv.GetEnvMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetEnv.GetEnvMock.defaultExpectation.results
		if mm_results == nil {
			mmGetEnv.t.Fatal("No results are set for the OSMock.GetEnv")
		}
		return (*mm_results).s1
	}
	if mmGetEnv.funcGetEnv != nil {
		return mmGetEnv.funcGetEnv(key)
	}
	mmGetEnv.t.Fatalf("Unexpected call to OSMock.GetEnv. %v", key)
	return
}

// GetEnvAfterCounter returns a count of finished OSMock.GetEnv invocations
func (mmGetEnv *OSMock) GetEnvAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetEnv.afterGetEnvCounter)
}

// GetEnvBeforeCounter returns a count of OSMock.GetEnv invocations
func (mmGetEnv *OSMock) GetEnvBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetEnv.beforeGetEnvCounter)
}

// Calls returns a list of arguments used in each call to OSMock.GetEnv.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetEnv *mOSMockGetEnv) Calls() []*OSMockGetEnvParams {
	mmGetEnv.mutex.RLock()

	argCopy := make([]*OSMockGetEnvParams, len(mmGetEnv.callArgs))
	copy(argCopy, mmGetEnv.callArgs)

	mmGetEnv.mutex.RUnlock()

	return argCopy
}

// MinimockGetEnvDone returns true if the count of the GetEnv invocations corresponds
// the number of defined expectations
func (m *OSMock) MinimockGetEnvDone() bool {
	if m.GetEnvMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetEnvMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetEnvMock.invocationsDone()
}

// MinimockGetEnvInspect logs each unmet expectation
func (m *OSMock) MinimockGetEnvInspect() {
	for _, e := range m.GetEnvMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OSMock.GetEnv at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetEnvCounter := mm_atomic.LoadUint64(&m.afterGetEnvCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetEnvMock.defaultExpectation != nil && afterGetEnvCounter < 1 {
		if m.GetEnvMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OSMock.GetEnv at\n%s", m.GetEnvMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OSMock.GetEnv at\n%s with params: %#v", m.GetEnvMock.defaultExpectation.expectationOrigins.origin, *m.GetEnvMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetEnv != nil && afterGetEnvCounter < 1 {
		m.t.Errorf("Expected call to OSMock.GetEnv at\n%s", m.funcGetEnvOrigin)
	}

	if !m.GetEnvMock.invocationsDone() && afterGetEnvCounter > 0 {
		m.t.Errorf("Expected %d calls to OSMock.GetEnv at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetEnvMock.expectedInvocations), m.GetEnvMock.expectedInvocationsOrigin, afterGetEnvCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OSMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetEnvInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OSMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OSMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetEnvDone()
}
