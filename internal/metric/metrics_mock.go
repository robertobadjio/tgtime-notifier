// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package metric

//go:generate minimock -i github.com/robertobadjio/tgtime-notifier/internal/metric.Metrics -o metrics_mock.go -n MetricsMock -p metric

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// MetricsMock implements Metrics
type MetricsMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcIncMessageCounter          func()
	funcIncMessageCounterOrigin    string
	inspectFuncIncMessageCounter   func()
	afterIncMessageCounterCounter  uint64
	beforeIncMessageCounterCounter uint64
	IncMessageCounterMock          mMetricsMockIncMessageCounter
}

// NewMetricsMock returns a mock for Metrics
func NewMetricsMock(t minimock.Tester) *MetricsMock {
	m := &MetricsMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.IncMessageCounterMock = mMetricsMockIncMessageCounter{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mMetricsMockIncMessageCounter struct {
	optional           bool
	mock               *MetricsMock
	defaultExpectation *MetricsMockIncMessageCounterExpectation
	expectations       []*MetricsMockIncMessageCounterExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// MetricsMockIncMessageCounterExpectation specifies expectation struct of the Metrics.IncMessageCounter
type MetricsMockIncMessageCounterExpectation struct {
	mock *MetricsMock

	returnOrigin string
	Counter      uint64
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmIncMessageCounter *mMetricsMockIncMessageCounter) Optional() *mMetricsMockIncMessageCounter {
	mmIncMessageCounter.optional = true
	return mmIncMessageCounter
}

// Expect sets up expected params for Metrics.IncMessageCounter
func (mmIncMessageCounter *mMetricsMockIncMessageCounter) Expect() *mMetricsMockIncMessageCounter {
	if mmIncMessageCounter.mock.funcIncMessageCounter != nil {
		mmIncMessageCounter.mock.t.Fatalf("MetricsMock.IncMessageCounter mock is already set by Set")
	}

	if mmIncMessageCounter.defaultExpectation == nil {
		mmIncMessageCounter.defaultExpectation = &MetricsMockIncMessageCounterExpectation{}
	}

	return mmIncMessageCounter
}

// Inspect accepts an inspector function that has same arguments as the Metrics.IncMessageCounter
func (mmIncMessageCounter *mMetricsMockIncMessageCounter) Inspect(f func()) *mMetricsMockIncMessageCounter {
	if mmIncMessageCounter.mock.inspectFuncIncMessageCounter != nil {
		mmIncMessageCounter.mock.t.Fatalf("Inspect function is already set for MetricsMock.IncMessageCounter")
	}

	mmIncMessageCounter.mock.inspectFuncIncMessageCounter = f

	return mmIncMessageCounter
}

// Return sets up results that will be returned by Metrics.IncMessageCounter
func (mmIncMessageCounter *mMetricsMockIncMessageCounter) Return() *MetricsMock {
	if mmIncMessageCounter.mock.funcIncMessageCounter != nil {
		mmIncMessageCounter.mock.t.Fatalf("MetricsMock.IncMessageCounter mock is already set by Set")
	}

	if mmIncMessageCounter.defaultExpectation == nil {
		mmIncMessageCounter.defaultExpectation = &MetricsMockIncMessageCounterExpectation{mock: mmIncMessageCounter.mock}
	}

	mmIncMessageCounter.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmIncMessageCounter.mock
}

// Set uses given function f to mock the Metrics.IncMessageCounter method
func (mmIncMessageCounter *mMetricsMockIncMessageCounter) Set(f func()) *MetricsMock {
	if mmIncMessageCounter.defaultExpectation != nil {
		mmIncMessageCounter.mock.t.Fatalf("Default expectation is already set for the Metrics.IncMessageCounter method")
	}

	if len(mmIncMessageCounter.expectations) > 0 {
		mmIncMessageCounter.mock.t.Fatalf("Some expectations are already set for the Metrics.IncMessageCounter method")
	}

	mmIncMessageCounter.mock.funcIncMessageCounter = f
	mmIncMessageCounter.mock.funcIncMessageCounterOrigin = minimock.CallerInfo(1)
	return mmIncMessageCounter.mock
}

// Times sets number of times Metrics.IncMessageCounter should be invoked
func (mmIncMessageCounter *mMetricsMockIncMessageCounter) Times(n uint64) *mMetricsMockIncMessageCounter {
	if n == 0 {
		mmIncMessageCounter.mock.t.Fatalf("Times of MetricsMock.IncMessageCounter mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmIncMessageCounter.expectedInvocations, n)
	mmIncMessageCounter.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmIncMessageCounter
}

func (mmIncMessageCounter *mMetricsMockIncMessageCounter) invocationsDone() bool {
	if len(mmIncMessageCounter.expectations) == 0 && mmIncMessageCounter.defaultExpectation == nil && mmIncMessageCounter.mock.funcIncMessageCounter == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmIncMessageCounter.mock.afterIncMessageCounterCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmIncMessageCounter.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// IncMessageCounter implements Metrics
func (mmIncMessageCounter *MetricsMock) IncMessageCounter() {
	mm_atomic.AddUint64(&mmIncMessageCounter.beforeIncMessageCounterCounter, 1)
	defer mm_atomic.AddUint64(&mmIncMessageCounter.afterIncMessageCounterCounter, 1)

	mmIncMessageCounter.t.Helper()

	if mmIncMessageCounter.inspectFuncIncMessageCounter != nil {
		mmIncMessageCounter.inspectFuncIncMessageCounter()
	}

	if mmIncMessageCounter.IncMessageCounterMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIncMessageCounter.IncMessageCounterMock.defaultExpectation.Counter, 1)

		return

	}
	if mmIncMessageCounter.funcIncMessageCounter != nil {
		mmIncMessageCounter.funcIncMessageCounter()
		return
	}
	mmIncMessageCounter.t.Fatalf("Unexpected call to MetricsMock.IncMessageCounter.")

}

// IncMessageCounterAfterCounter returns a count of finished MetricsMock.IncMessageCounter invocations
func (mmIncMessageCounter *MetricsMock) IncMessageCounterAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIncMessageCounter.afterIncMessageCounterCounter)
}

// IncMessageCounterBeforeCounter returns a count of MetricsMock.IncMessageCounter invocations
func (mmIncMessageCounter *MetricsMock) IncMessageCounterBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIncMessageCounter.beforeIncMessageCounterCounter)
}

// MinimockIncMessageCounterDone returns true if the count of the IncMessageCounter invocations corresponds
// the number of defined expectations
func (m *MetricsMock) MinimockIncMessageCounterDone() bool {
	if m.IncMessageCounterMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.IncMessageCounterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.IncMessageCounterMock.invocationsDone()
}

// MinimockIncMessageCounterInspect logs each unmet expectation
func (m *MetricsMock) MinimockIncMessageCounterInspect() {
	for _, e := range m.IncMessageCounterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to MetricsMock.IncMessageCounter")
		}
	}

	afterIncMessageCounterCounter := mm_atomic.LoadUint64(&m.afterIncMessageCounterCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.IncMessageCounterMock.defaultExpectation != nil && afterIncMessageCounterCounter < 1 {
		m.t.Errorf("Expected call to MetricsMock.IncMessageCounter at\n%s", m.IncMessageCounterMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIncMessageCounter != nil && afterIncMessageCounterCounter < 1 {
		m.t.Errorf("Expected call to MetricsMock.IncMessageCounter at\n%s", m.funcIncMessageCounterOrigin)
	}

	if !m.IncMessageCounterMock.invocationsDone() && afterIncMessageCounterCounter > 0 {
		m.t.Errorf("Expected %d calls to MetricsMock.IncMessageCounter at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.IncMessageCounterMock.expectedInvocations), m.IncMessageCounterMock.expectedInvocationsOrigin, afterIncMessageCounterCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MetricsMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockIncMessageCounterInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MetricsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MetricsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockIncMessageCounterDone()
}
