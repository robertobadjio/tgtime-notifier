// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package previous_day_info

//go:generate minimock -i github.com/robertobadjio/tgtime-notifier/internal/service/previous_day_info.APIClient -o api_client_mock.go -n APIClientMock -p previous_day_info

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	pbapiv1 "github.com/robertobadjio/tgtime-api/api/v1/pb/api"
)

// APIClientMock implements APIClient
type APIClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetUserByMacAddress          func(ctx context.Context, macAddress string) (gp1 *pbapiv1.GetUserByMacAddressResponse, err error)
	funcGetUserByMacAddressOrigin    string
	inspectFuncGetUserByMacAddress   func(ctx context.Context, macAddress string)
	afterGetUserByMacAddressCounter  uint64
	beforeGetUserByMacAddressCounter uint64
	GetUserByMacAddressMock          mAPIClientMockGetUserByMacAddress
}

// NewAPIClientMock returns a mock for APIClient
func NewAPIClientMock(t minimock.Tester) *APIClientMock {
	m := &APIClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetUserByMacAddressMock = mAPIClientMockGetUserByMacAddress{mock: m}
	m.GetUserByMacAddressMock.callArgs = []*APIClientMockGetUserByMacAddressParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAPIClientMockGetUserByMacAddress struct {
	optional           bool
	mock               *APIClientMock
	defaultExpectation *APIClientMockGetUserByMacAddressExpectation
	expectations       []*APIClientMockGetUserByMacAddressExpectation

	callArgs []*APIClientMockGetUserByMacAddressParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// APIClientMockGetUserByMacAddressExpectation specifies expectation struct of the APIClient.GetUserByMacAddress
type APIClientMockGetUserByMacAddressExpectation struct {
	mock               *APIClientMock
	params             *APIClientMockGetUserByMacAddressParams
	paramPtrs          *APIClientMockGetUserByMacAddressParamPtrs
	expectationOrigins APIClientMockGetUserByMacAddressExpectationOrigins
	results            *APIClientMockGetUserByMacAddressResults
	returnOrigin       string
	Counter            uint64
}

// APIClientMockGetUserByMacAddressParams contains parameters of the APIClient.GetUserByMacAddress
type APIClientMockGetUserByMacAddressParams struct {
	ctx        context.Context
	macAddress string
}

// APIClientMockGetUserByMacAddressParamPtrs contains pointers to parameters of the APIClient.GetUserByMacAddress
type APIClientMockGetUserByMacAddressParamPtrs struct {
	ctx        *context.Context
	macAddress *string
}

// APIClientMockGetUserByMacAddressResults contains results of the APIClient.GetUserByMacAddress
type APIClientMockGetUserByMacAddressResults struct {
	gp1 *pbapiv1.GetUserByMacAddressResponse
	err error
}

// APIClientMockGetUserByMacAddressOrigins contains origins of expectations of the APIClient.GetUserByMacAddress
type APIClientMockGetUserByMacAddressExpectationOrigins struct {
	origin           string
	originCtx        string
	originMacAddress string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) Optional() *mAPIClientMockGetUserByMacAddress {
	mmGetUserByMacAddress.optional = true
	return mmGetUserByMacAddress
}

// Expect sets up expected params for APIClient.GetUserByMacAddress
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) Expect(ctx context.Context, macAddress string) *mAPIClientMockGetUserByMacAddress {
	if mmGetUserByMacAddress.mock.funcGetUserByMacAddress != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("APIClientMock.GetUserByMacAddress mock is already set by Set")
	}

	if mmGetUserByMacAddress.defaultExpectation == nil {
		mmGetUserByMacAddress.defaultExpectation = &APIClientMockGetUserByMacAddressExpectation{}
	}

	if mmGetUserByMacAddress.defaultExpectation.paramPtrs != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("APIClientMock.GetUserByMacAddress mock is already set by ExpectParams functions")
	}

	mmGetUserByMacAddress.defaultExpectation.params = &APIClientMockGetUserByMacAddressParams{ctx, macAddress}
	mmGetUserByMacAddress.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetUserByMacAddress.expectations {
		if minimock.Equal(e.params, mmGetUserByMacAddress.defaultExpectation.params) {
			mmGetUserByMacAddress.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByMacAddress.defaultExpectation.params)
		}
	}

	return mmGetUserByMacAddress
}

// ExpectCtxParam1 sets up expected param ctx for APIClient.GetUserByMacAddress
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) ExpectCtxParam1(ctx context.Context) *mAPIClientMockGetUserByMacAddress {
	if mmGetUserByMacAddress.mock.funcGetUserByMacAddress != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("APIClientMock.GetUserByMacAddress mock is already set by Set")
	}

	if mmGetUserByMacAddress.defaultExpectation == nil {
		mmGetUserByMacAddress.defaultExpectation = &APIClientMockGetUserByMacAddressExpectation{}
	}

	if mmGetUserByMacAddress.defaultExpectation.params != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("APIClientMock.GetUserByMacAddress mock is already set by Expect")
	}

	if mmGetUserByMacAddress.defaultExpectation.paramPtrs == nil {
		mmGetUserByMacAddress.defaultExpectation.paramPtrs = &APIClientMockGetUserByMacAddressParamPtrs{}
	}
	mmGetUserByMacAddress.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetUserByMacAddress.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetUserByMacAddress
}

// ExpectMacAddressParam2 sets up expected param macAddress for APIClient.GetUserByMacAddress
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) ExpectMacAddressParam2(macAddress string) *mAPIClientMockGetUserByMacAddress {
	if mmGetUserByMacAddress.mock.funcGetUserByMacAddress != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("APIClientMock.GetUserByMacAddress mock is already set by Set")
	}

	if mmGetUserByMacAddress.defaultExpectation == nil {
		mmGetUserByMacAddress.defaultExpectation = &APIClientMockGetUserByMacAddressExpectation{}
	}

	if mmGetUserByMacAddress.defaultExpectation.params != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("APIClientMock.GetUserByMacAddress mock is already set by Expect")
	}

	if mmGetUserByMacAddress.defaultExpectation.paramPtrs == nil {
		mmGetUserByMacAddress.defaultExpectation.paramPtrs = &APIClientMockGetUserByMacAddressParamPtrs{}
	}
	mmGetUserByMacAddress.defaultExpectation.paramPtrs.macAddress = &macAddress
	mmGetUserByMacAddress.defaultExpectation.expectationOrigins.originMacAddress = minimock.CallerInfo(1)

	return mmGetUserByMacAddress
}

// Inspect accepts an inspector function that has same arguments as the APIClient.GetUserByMacAddress
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) Inspect(f func(ctx context.Context, macAddress string)) *mAPIClientMockGetUserByMacAddress {
	if mmGetUserByMacAddress.mock.inspectFuncGetUserByMacAddress != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("Inspect function is already set for APIClientMock.GetUserByMacAddress")
	}

	mmGetUserByMacAddress.mock.inspectFuncGetUserByMacAddress = f

	return mmGetUserByMacAddress
}

// Return sets up results that will be returned by APIClient.GetUserByMacAddress
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) Return(gp1 *pbapiv1.GetUserByMacAddressResponse, err error) *APIClientMock {
	if mmGetUserByMacAddress.mock.funcGetUserByMacAddress != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("APIClientMock.GetUserByMacAddress mock is already set by Set")
	}

	if mmGetUserByMacAddress.defaultExpectation == nil {
		mmGetUserByMacAddress.defaultExpectation = &APIClientMockGetUserByMacAddressExpectation{mock: mmGetUserByMacAddress.mock}
	}
	mmGetUserByMacAddress.defaultExpectation.results = &APIClientMockGetUserByMacAddressResults{gp1, err}
	mmGetUserByMacAddress.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetUserByMacAddress.mock
}

// Set uses given function f to mock the APIClient.GetUserByMacAddress method
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) Set(f func(ctx context.Context, macAddress string) (gp1 *pbapiv1.GetUserByMacAddressResponse, err error)) *APIClientMock {
	if mmGetUserByMacAddress.defaultExpectation != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("Default expectation is already set for the APIClient.GetUserByMacAddress method")
	}

	if len(mmGetUserByMacAddress.expectations) > 0 {
		mmGetUserByMacAddress.mock.t.Fatalf("Some expectations are already set for the APIClient.GetUserByMacAddress method")
	}

	mmGetUserByMacAddress.mock.funcGetUserByMacAddress = f
	mmGetUserByMacAddress.mock.funcGetUserByMacAddressOrigin = minimock.CallerInfo(1)
	return mmGetUserByMacAddress.mock
}

// When sets expectation for the APIClient.GetUserByMacAddress which will trigger the result defined by the following
// Then helper
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) When(ctx context.Context, macAddress string) *APIClientMockGetUserByMacAddressExpectation {
	if mmGetUserByMacAddress.mock.funcGetUserByMacAddress != nil {
		mmGetUserByMacAddress.mock.t.Fatalf("APIClientMock.GetUserByMacAddress mock is already set by Set")
	}

	expectation := &APIClientMockGetUserByMacAddressExpectation{
		mock:               mmGetUserByMacAddress.mock,
		params:             &APIClientMockGetUserByMacAddressParams{ctx, macAddress},
		expectationOrigins: APIClientMockGetUserByMacAddressExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetUserByMacAddress.expectations = append(mmGetUserByMacAddress.expectations, expectation)
	return expectation
}

// Then sets up APIClient.GetUserByMacAddress return parameters for the expectation previously defined by the When method
func (e *APIClientMockGetUserByMacAddressExpectation) Then(gp1 *pbapiv1.GetUserByMacAddressResponse, err error) *APIClientMock {
	e.results = &APIClientMockGetUserByMacAddressResults{gp1, err}
	return e.mock
}

// Times sets number of times APIClient.GetUserByMacAddress should be invoked
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) Times(n uint64) *mAPIClientMockGetUserByMacAddress {
	if n == 0 {
		mmGetUserByMacAddress.mock.t.Fatalf("Times of APIClientMock.GetUserByMacAddress mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserByMacAddress.expectedInvocations, n)
	mmGetUserByMacAddress.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetUserByMacAddress
}

func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) invocationsDone() bool {
	if len(mmGetUserByMacAddress.expectations) == 0 && mmGetUserByMacAddress.defaultExpectation == nil && mmGetUserByMacAddress.mock.funcGetUserByMacAddress == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserByMacAddress.mock.afterGetUserByMacAddressCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserByMacAddress.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserByMacAddress implements APIClient
func (mmGetUserByMacAddress *APIClientMock) GetUserByMacAddress(ctx context.Context, macAddress string) (gp1 *pbapiv1.GetUserByMacAddressResponse, err error) {
	mm_atomic.AddUint64(&mmGetUserByMacAddress.beforeGetUserByMacAddressCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByMacAddress.afterGetUserByMacAddressCounter, 1)

	mmGetUserByMacAddress.t.Helper()

	if mmGetUserByMacAddress.inspectFuncGetUserByMacAddress != nil {
		mmGetUserByMacAddress.inspectFuncGetUserByMacAddress(ctx, macAddress)
	}

	mm_params := APIClientMockGetUserByMacAddressParams{ctx, macAddress}

	// Record call args
	mmGetUserByMacAddress.GetUserByMacAddressMock.mutex.Lock()
	mmGetUserByMacAddress.GetUserByMacAddressMock.callArgs = append(mmGetUserByMacAddress.GetUserByMacAddressMock.callArgs, &mm_params)
	mmGetUserByMacAddress.GetUserByMacAddressMock.mutex.Unlock()

	for _, e := range mmGetUserByMacAddress.GetUserByMacAddressMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetUserByMacAddress.GetUserByMacAddressMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByMacAddress.GetUserByMacAddressMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByMacAddress.GetUserByMacAddressMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserByMacAddress.GetUserByMacAddressMock.defaultExpectation.paramPtrs

		mm_got := APIClientMockGetUserByMacAddressParams{ctx, macAddress}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserByMacAddress.t.Errorf("APIClientMock.GetUserByMacAddress got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUserByMacAddress.GetUserByMacAddressMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.macAddress != nil && !minimock.Equal(*mm_want_ptrs.macAddress, mm_got.macAddress) {
				mmGetUserByMacAddress.t.Errorf("APIClientMock.GetUserByMacAddress got unexpected parameter macAddress, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUserByMacAddress.GetUserByMacAddressMock.defaultExpectation.expectationOrigins.originMacAddress, *mm_want_ptrs.macAddress, mm_got.macAddress, minimock.Diff(*mm_want_ptrs.macAddress, mm_got.macAddress))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByMacAddress.t.Errorf("APIClientMock.GetUserByMacAddress got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetUserByMacAddress.GetUserByMacAddressMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByMacAddress.GetUserByMacAddressMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByMacAddress.t.Fatal("No results are set for the APIClientMock.GetUserByMacAddress")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetUserByMacAddress.funcGetUserByMacAddress != nil {
		return mmGetUserByMacAddress.funcGetUserByMacAddress(ctx, macAddress)
	}
	mmGetUserByMacAddress.t.Fatalf("Unexpected call to APIClientMock.GetUserByMacAddress. %v %v", ctx, macAddress)
	return
}

// GetUserByMacAddressAfterCounter returns a count of finished APIClientMock.GetUserByMacAddress invocations
func (mmGetUserByMacAddress *APIClientMock) GetUserByMacAddressAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByMacAddress.afterGetUserByMacAddressCounter)
}

// GetUserByMacAddressBeforeCounter returns a count of APIClientMock.GetUserByMacAddress invocations
func (mmGetUserByMacAddress *APIClientMock) GetUserByMacAddressBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByMacAddress.beforeGetUserByMacAddressCounter)
}

// Calls returns a list of arguments used in each call to APIClientMock.GetUserByMacAddress.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByMacAddress *mAPIClientMockGetUserByMacAddress) Calls() []*APIClientMockGetUserByMacAddressParams {
	mmGetUserByMacAddress.mutex.RLock()

	argCopy := make([]*APIClientMockGetUserByMacAddressParams, len(mmGetUserByMacAddress.callArgs))
	copy(argCopy, mmGetUserByMacAddress.callArgs)

	mmGetUserByMacAddress.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByMacAddressDone returns true if the count of the GetUserByMacAddress invocations corresponds
// the number of defined expectations
func (m *APIClientMock) MinimockGetUserByMacAddressDone() bool {
	if m.GetUserByMacAddressMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserByMacAddressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserByMacAddressMock.invocationsDone()
}

// MinimockGetUserByMacAddressInspect logs each unmet expectation
func (m *APIClientMock) MinimockGetUserByMacAddressInspect() {
	for _, e := range m.GetUserByMacAddressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to APIClientMock.GetUserByMacAddress at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetUserByMacAddressCounter := mm_atomic.LoadUint64(&m.afterGetUserByMacAddressCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByMacAddressMock.defaultExpectation != nil && afterGetUserByMacAddressCounter < 1 {
		if m.GetUserByMacAddressMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to APIClientMock.GetUserByMacAddress at\n%s", m.GetUserByMacAddressMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to APIClientMock.GetUserByMacAddress at\n%s with params: %#v", m.GetUserByMacAddressMock.defaultExpectation.expectationOrigins.origin, *m.GetUserByMacAddressMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByMacAddress != nil && afterGetUserByMacAddressCounter < 1 {
		m.t.Errorf("Expected call to APIClientMock.GetUserByMacAddress at\n%s", m.funcGetUserByMacAddressOrigin)
	}

	if !m.GetUserByMacAddressMock.invocationsDone() && afterGetUserByMacAddressCounter > 0 {
		m.t.Errorf("Expected %d calls to APIClientMock.GetUserByMacAddress at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserByMacAddressMock.expectedInvocations), m.GetUserByMacAddressMock.expectedInvocationsOrigin, afterGetUserByMacAddressCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *APIClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetUserByMacAddressInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *APIClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *APIClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetUserByMacAddressDone()
}
