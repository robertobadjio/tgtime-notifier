// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package previous_day_info

//go:generate minimock -i github.com/robertobadjio/tgtime-notifier/internal/service/previous_day_info.notifier -o notifier_mock.go -n NotifierMock -p previous_day_info

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/robertobadjio/tgtime-notifier/internal/service/notifier/telegram"
)

// NotifierMock implements notifier
type NotifierMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSendPreviousDayInfoMessage          func(ctx context.Context, params telegram.ParamsPreviousDayInfo) (err error)
	funcSendPreviousDayInfoMessageOrigin    string
	inspectFuncSendPreviousDayInfoMessage   func(ctx context.Context, params telegram.ParamsPreviousDayInfo)
	afterSendPreviousDayInfoMessageCounter  uint64
	beforeSendPreviousDayInfoMessageCounter uint64
	SendPreviousDayInfoMessageMock          mNotifierMockSendPreviousDayInfoMessage
}

// NewNotifierMock returns a mock for notifier
func NewNotifierMock(t minimock.Tester) *NotifierMock {
	m := &NotifierMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendPreviousDayInfoMessageMock = mNotifierMockSendPreviousDayInfoMessage{mock: m}
	m.SendPreviousDayInfoMessageMock.callArgs = []*NotifierMockSendPreviousDayInfoMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mNotifierMockSendPreviousDayInfoMessage struct {
	optional           bool
	mock               *NotifierMock
	defaultExpectation *NotifierMockSendPreviousDayInfoMessageExpectation
	expectations       []*NotifierMockSendPreviousDayInfoMessageExpectation

	callArgs []*NotifierMockSendPreviousDayInfoMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// NotifierMockSendPreviousDayInfoMessageExpectation specifies expectation struct of the notifier.SendPreviousDayInfoMessage
type NotifierMockSendPreviousDayInfoMessageExpectation struct {
	mock               *NotifierMock
	params             *NotifierMockSendPreviousDayInfoMessageParams
	paramPtrs          *NotifierMockSendPreviousDayInfoMessageParamPtrs
	expectationOrigins NotifierMockSendPreviousDayInfoMessageExpectationOrigins
	results            *NotifierMockSendPreviousDayInfoMessageResults
	returnOrigin       string
	Counter            uint64
}

// NotifierMockSendPreviousDayInfoMessageParams contains parameters of the notifier.SendPreviousDayInfoMessage
type NotifierMockSendPreviousDayInfoMessageParams struct {
	ctx    context.Context
	params telegram.ParamsPreviousDayInfo
}

// NotifierMockSendPreviousDayInfoMessageParamPtrs contains pointers to parameters of the notifier.SendPreviousDayInfoMessage
type NotifierMockSendPreviousDayInfoMessageParamPtrs struct {
	ctx    *context.Context
	params *telegram.ParamsPreviousDayInfo
}

// NotifierMockSendPreviousDayInfoMessageResults contains results of the notifier.SendPreviousDayInfoMessage
type NotifierMockSendPreviousDayInfoMessageResults struct {
	err error
}

// NotifierMockSendPreviousDayInfoMessageOrigins contains origins of expectations of the notifier.SendPreviousDayInfoMessage
type NotifierMockSendPreviousDayInfoMessageExpectationOrigins struct {
	origin       string
	originCtx    string
	originParams string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) Optional() *mNotifierMockSendPreviousDayInfoMessage {
	mmSendPreviousDayInfoMessage.optional = true
	return mmSendPreviousDayInfoMessage
}

// Expect sets up expected params for notifier.SendPreviousDayInfoMessage
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) Expect(ctx context.Context, params telegram.ParamsPreviousDayInfo) *mNotifierMockSendPreviousDayInfoMessage {
	if mmSendPreviousDayInfoMessage.mock.funcSendPreviousDayInfoMessage != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("NotifierMock.SendPreviousDayInfoMessage mock is already set by Set")
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation == nil {
		mmSendPreviousDayInfoMessage.defaultExpectation = &NotifierMockSendPreviousDayInfoMessageExpectation{}
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation.paramPtrs != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("NotifierMock.SendPreviousDayInfoMessage mock is already set by ExpectParams functions")
	}

	mmSendPreviousDayInfoMessage.defaultExpectation.params = &NotifierMockSendPreviousDayInfoMessageParams{ctx, params}
	mmSendPreviousDayInfoMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendPreviousDayInfoMessage.expectations {
		if minimock.Equal(e.params, mmSendPreviousDayInfoMessage.defaultExpectation.params) {
			mmSendPreviousDayInfoMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendPreviousDayInfoMessage.defaultExpectation.params)
		}
	}

	return mmSendPreviousDayInfoMessage
}

// ExpectCtxParam1 sets up expected param ctx for notifier.SendPreviousDayInfoMessage
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) ExpectCtxParam1(ctx context.Context) *mNotifierMockSendPreviousDayInfoMessage {
	if mmSendPreviousDayInfoMessage.mock.funcSendPreviousDayInfoMessage != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("NotifierMock.SendPreviousDayInfoMessage mock is already set by Set")
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation == nil {
		mmSendPreviousDayInfoMessage.defaultExpectation = &NotifierMockSendPreviousDayInfoMessageExpectation{}
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation.params != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("NotifierMock.SendPreviousDayInfoMessage mock is already set by Expect")
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation.paramPtrs == nil {
		mmSendPreviousDayInfoMessage.defaultExpectation.paramPtrs = &NotifierMockSendPreviousDayInfoMessageParamPtrs{}
	}
	mmSendPreviousDayInfoMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendPreviousDayInfoMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendPreviousDayInfoMessage
}

// ExpectParamsParam2 sets up expected param params for notifier.SendPreviousDayInfoMessage
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) ExpectParamsParam2(params telegram.ParamsPreviousDayInfo) *mNotifierMockSendPreviousDayInfoMessage {
	if mmSendPreviousDayInfoMessage.mock.funcSendPreviousDayInfoMessage != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("NotifierMock.SendPreviousDayInfoMessage mock is already set by Set")
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation == nil {
		mmSendPreviousDayInfoMessage.defaultExpectation = &NotifierMockSendPreviousDayInfoMessageExpectation{}
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation.params != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("NotifierMock.SendPreviousDayInfoMessage mock is already set by Expect")
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation.paramPtrs == nil {
		mmSendPreviousDayInfoMessage.defaultExpectation.paramPtrs = &NotifierMockSendPreviousDayInfoMessageParamPtrs{}
	}
	mmSendPreviousDayInfoMessage.defaultExpectation.paramPtrs.params = &params
	mmSendPreviousDayInfoMessage.defaultExpectation.expectationOrigins.originParams = minimock.CallerInfo(1)

	return mmSendPreviousDayInfoMessage
}

// Inspect accepts an inspector function that has same arguments as the notifier.SendPreviousDayInfoMessage
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) Inspect(f func(ctx context.Context, params telegram.ParamsPreviousDayInfo)) *mNotifierMockSendPreviousDayInfoMessage {
	if mmSendPreviousDayInfoMessage.mock.inspectFuncSendPreviousDayInfoMessage != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("Inspect function is already set for NotifierMock.SendPreviousDayInfoMessage")
	}

	mmSendPreviousDayInfoMessage.mock.inspectFuncSendPreviousDayInfoMessage = f

	return mmSendPreviousDayInfoMessage
}

// Return sets up results that will be returned by notifier.SendPreviousDayInfoMessage
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) Return(err error) *NotifierMock {
	if mmSendPreviousDayInfoMessage.mock.funcSendPreviousDayInfoMessage != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("NotifierMock.SendPreviousDayInfoMessage mock is already set by Set")
	}

	if mmSendPreviousDayInfoMessage.defaultExpectation == nil {
		mmSendPreviousDayInfoMessage.defaultExpectation = &NotifierMockSendPreviousDayInfoMessageExpectation{mock: mmSendPreviousDayInfoMessage.mock}
	}
	mmSendPreviousDayInfoMessage.defaultExpectation.results = &NotifierMockSendPreviousDayInfoMessageResults{err}
	mmSendPreviousDayInfoMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendPreviousDayInfoMessage.mock
}

// Set uses given function f to mock the notifier.SendPreviousDayInfoMessage method
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) Set(f func(ctx context.Context, params telegram.ParamsPreviousDayInfo) (err error)) *NotifierMock {
	if mmSendPreviousDayInfoMessage.defaultExpectation != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("Default expectation is already set for the notifier.SendPreviousDayInfoMessage method")
	}

	if len(mmSendPreviousDayInfoMessage.expectations) > 0 {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("Some expectations are already set for the notifier.SendPreviousDayInfoMessage method")
	}

	mmSendPreviousDayInfoMessage.mock.funcSendPreviousDayInfoMessage = f
	mmSendPreviousDayInfoMessage.mock.funcSendPreviousDayInfoMessageOrigin = minimock.CallerInfo(1)
	return mmSendPreviousDayInfoMessage.mock
}

// When sets expectation for the notifier.SendPreviousDayInfoMessage which will trigger the result defined by the following
// Then helper
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) When(ctx context.Context, params telegram.ParamsPreviousDayInfo) *NotifierMockSendPreviousDayInfoMessageExpectation {
	if mmSendPreviousDayInfoMessage.mock.funcSendPreviousDayInfoMessage != nil {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("NotifierMock.SendPreviousDayInfoMessage mock is already set by Set")
	}

	expectation := &NotifierMockSendPreviousDayInfoMessageExpectation{
		mock:               mmSendPreviousDayInfoMessage.mock,
		params:             &NotifierMockSendPreviousDayInfoMessageParams{ctx, params},
		expectationOrigins: NotifierMockSendPreviousDayInfoMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendPreviousDayInfoMessage.expectations = append(mmSendPreviousDayInfoMessage.expectations, expectation)
	return expectation
}

// Then sets up notifier.SendPreviousDayInfoMessage return parameters for the expectation previously defined by the When method
func (e *NotifierMockSendPreviousDayInfoMessageExpectation) Then(err error) *NotifierMock {
	e.results = &NotifierMockSendPreviousDayInfoMessageResults{err}
	return e.mock
}

// Times sets number of times notifier.SendPreviousDayInfoMessage should be invoked
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) Times(n uint64) *mNotifierMockSendPreviousDayInfoMessage {
	if n == 0 {
		mmSendPreviousDayInfoMessage.mock.t.Fatalf("Times of NotifierMock.SendPreviousDayInfoMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendPreviousDayInfoMessage.expectedInvocations, n)
	mmSendPreviousDayInfoMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendPreviousDayInfoMessage
}

func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) invocationsDone() bool {
	if len(mmSendPreviousDayInfoMessage.expectations) == 0 && mmSendPreviousDayInfoMessage.defaultExpectation == nil && mmSendPreviousDayInfoMessage.mock.funcSendPreviousDayInfoMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendPreviousDayInfoMessage.mock.afterSendPreviousDayInfoMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendPreviousDayInfoMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendPreviousDayInfoMessage implements notifier
func (mmSendPreviousDayInfoMessage *NotifierMock) SendPreviousDayInfoMessage(ctx context.Context, params telegram.ParamsPreviousDayInfo) (err error) {
	mm_atomic.AddUint64(&mmSendPreviousDayInfoMessage.beforeSendPreviousDayInfoMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendPreviousDayInfoMessage.afterSendPreviousDayInfoMessageCounter, 1)

	mmSendPreviousDayInfoMessage.t.Helper()

	if mmSendPreviousDayInfoMessage.inspectFuncSendPreviousDayInfoMessage != nil {
		mmSendPreviousDayInfoMessage.inspectFuncSendPreviousDayInfoMessage(ctx, params)
	}

	mm_params := NotifierMockSendPreviousDayInfoMessageParams{ctx, params}

	// Record call args
	mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.mutex.Lock()
	mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.callArgs = append(mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.callArgs, &mm_params)
	mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.mutex.Unlock()

	for _, e := range mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.defaultExpectation.params
		mm_want_ptrs := mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.defaultExpectation.paramPtrs

		mm_got := NotifierMockSendPreviousDayInfoMessageParams{ctx, params}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendPreviousDayInfoMessage.t.Errorf("NotifierMock.SendPreviousDayInfoMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.params != nil && !minimock.Equal(*mm_want_ptrs.params, mm_got.params) {
				mmSendPreviousDayInfoMessage.t.Errorf("NotifierMock.SendPreviousDayInfoMessage got unexpected parameter params, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.defaultExpectation.expectationOrigins.originParams, *mm_want_ptrs.params, mm_got.params, minimock.Diff(*mm_want_ptrs.params, mm_got.params))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendPreviousDayInfoMessage.t.Errorf("NotifierMock.SendPreviousDayInfoMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendPreviousDayInfoMessage.SendPreviousDayInfoMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendPreviousDayInfoMessage.t.Fatal("No results are set for the NotifierMock.SendPreviousDayInfoMessage")
		}
		return (*mm_results).err
	}
	if mmSendPreviousDayInfoMessage.funcSendPreviousDayInfoMessage != nil {
		return mmSendPreviousDayInfoMessage.funcSendPreviousDayInfoMessage(ctx, params)
	}
	mmSendPreviousDayInfoMessage.t.Fatalf("Unexpected call to NotifierMock.SendPreviousDayInfoMessage. %v %v", ctx, params)
	return
}

// SendPreviousDayInfoMessageAfterCounter returns a count of finished NotifierMock.SendPreviousDayInfoMessage invocations
func (mmSendPreviousDayInfoMessage *NotifierMock) SendPreviousDayInfoMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendPreviousDayInfoMessage.afterSendPreviousDayInfoMessageCounter)
}

// SendPreviousDayInfoMessageBeforeCounter returns a count of NotifierMock.SendPreviousDayInfoMessage invocations
func (mmSendPreviousDayInfoMessage *NotifierMock) SendPreviousDayInfoMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendPreviousDayInfoMessage.beforeSendPreviousDayInfoMessageCounter)
}

// Calls returns a list of arguments used in each call to NotifierMock.SendPreviousDayInfoMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendPreviousDayInfoMessage *mNotifierMockSendPreviousDayInfoMessage) Calls() []*NotifierMockSendPreviousDayInfoMessageParams {
	mmSendPreviousDayInfoMessage.mutex.RLock()

	argCopy := make([]*NotifierMockSendPreviousDayInfoMessageParams, len(mmSendPreviousDayInfoMessage.callArgs))
	copy(argCopy, mmSendPreviousDayInfoMessage.callArgs)

	mmSendPreviousDayInfoMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendPreviousDayInfoMessageDone returns true if the count of the SendPreviousDayInfoMessage invocations corresponds
// the number of defined expectations
func (m *NotifierMock) MinimockSendPreviousDayInfoMessageDone() bool {
	if m.SendPreviousDayInfoMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendPreviousDayInfoMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendPreviousDayInfoMessageMock.invocationsDone()
}

// MinimockSendPreviousDayInfoMessageInspect logs each unmet expectation
func (m *NotifierMock) MinimockSendPreviousDayInfoMessageInspect() {
	for _, e := range m.SendPreviousDayInfoMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NotifierMock.SendPreviousDayInfoMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendPreviousDayInfoMessageCounter := mm_atomic.LoadUint64(&m.afterSendPreviousDayInfoMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendPreviousDayInfoMessageMock.defaultExpectation != nil && afterSendPreviousDayInfoMessageCounter < 1 {
		if m.SendPreviousDayInfoMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to NotifierMock.SendPreviousDayInfoMessage at\n%s", m.SendPreviousDayInfoMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to NotifierMock.SendPreviousDayInfoMessage at\n%s with params: %#v", m.SendPreviousDayInfoMessageMock.defaultExpectation.expectationOrigins.origin, *m.SendPreviousDayInfoMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendPreviousDayInfoMessage != nil && afterSendPreviousDayInfoMessageCounter < 1 {
		m.t.Errorf("Expected call to NotifierMock.SendPreviousDayInfoMessage at\n%s", m.funcSendPreviousDayInfoMessageOrigin)
	}

	if !m.SendPreviousDayInfoMessageMock.invocationsDone() && afterSendPreviousDayInfoMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to NotifierMock.SendPreviousDayInfoMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendPreviousDayInfoMessageMock.expectedInvocations), m.SendPreviousDayInfoMessageMock.expectedInvocationsOrigin, afterSendPreviousDayInfoMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NotifierMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendPreviousDayInfoMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NotifierMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NotifierMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendPreviousDayInfoMessageDone()
}
