// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package command

//go:generate minimock -i github.com/robertobadjio/tgtime-notifier/internal/service/notifier/telegram/command.Command -o command_mock.go -n CommandMock -p command

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CommandMock implements Command
type CommandMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetMessage          func(ctx context.Context) (s1 string, err error)
	funcGetMessageOrigin    string
	inspectFuncGetMessage   func(ctx context.Context)
	afterGetMessageCounter  uint64
	beforeGetMessageCounter uint64
	GetMessageMock          mCommandMockGetMessage
}

// NewCommandMock returns a mock for Command
func NewCommandMock(t minimock.Tester) *CommandMock {
	m := &CommandMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMessageMock = mCommandMockGetMessage{mock: m}
	m.GetMessageMock.callArgs = []*CommandMockGetMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCommandMockGetMessage struct {
	optional           bool
	mock               *CommandMock
	defaultExpectation *CommandMockGetMessageExpectation
	expectations       []*CommandMockGetMessageExpectation

	callArgs []*CommandMockGetMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CommandMockGetMessageExpectation specifies expectation struct of the Command.GetMessage
type CommandMockGetMessageExpectation struct {
	mock               *CommandMock
	params             *CommandMockGetMessageParams
	paramPtrs          *CommandMockGetMessageParamPtrs
	expectationOrigins CommandMockGetMessageExpectationOrigins
	results            *CommandMockGetMessageResults
	returnOrigin       string
	Counter            uint64
}

// CommandMockGetMessageParams contains parameters of the Command.GetMessage
type CommandMockGetMessageParams struct {
	ctx context.Context
}

// CommandMockGetMessageParamPtrs contains pointers to parameters of the Command.GetMessage
type CommandMockGetMessageParamPtrs struct {
	ctx *context.Context
}

// CommandMockGetMessageResults contains results of the Command.GetMessage
type CommandMockGetMessageResults struct {
	s1  string
	err error
}

// CommandMockGetMessageOrigins contains origins of expectations of the Command.GetMessage
type CommandMockGetMessageExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetMessage *mCommandMockGetMessage) Optional() *mCommandMockGetMessage {
	mmGetMessage.optional = true
	return mmGetMessage
}

// Expect sets up expected params for Command.GetMessage
func (mmGetMessage *mCommandMockGetMessage) Expect(ctx context.Context) *mCommandMockGetMessage {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("CommandMock.GetMessage mock is already set by Set")
	}

	if mmGetMessage.defaultExpectation == nil {
		mmGetMessage.defaultExpectation = &CommandMockGetMessageExpectation{}
	}

	if mmGetMessage.defaultExpectation.paramPtrs != nil {
		mmGetMessage.mock.t.Fatalf("CommandMock.GetMessage mock is already set by ExpectParams functions")
	}

	mmGetMessage.defaultExpectation.params = &CommandMockGetMessageParams{ctx}
	mmGetMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetMessage.expectations {
		if minimock.Equal(e.params, mmGetMessage.defaultExpectation.params) {
			mmGetMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMessage.defaultExpectation.params)
		}
	}

	return mmGetMessage
}

// ExpectCtxParam1 sets up expected param ctx for Command.GetMessage
func (mmGetMessage *mCommandMockGetMessage) ExpectCtxParam1(ctx context.Context) *mCommandMockGetMessage {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("CommandMock.GetMessage mock is already set by Set")
	}

	if mmGetMessage.defaultExpectation == nil {
		mmGetMessage.defaultExpectation = &CommandMockGetMessageExpectation{}
	}

	if mmGetMessage.defaultExpectation.params != nil {
		mmGetMessage.mock.t.Fatalf("CommandMock.GetMessage mock is already set by Expect")
	}

	if mmGetMessage.defaultExpectation.paramPtrs == nil {
		mmGetMessage.defaultExpectation.paramPtrs = &CommandMockGetMessageParamPtrs{}
	}
	mmGetMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetMessage
}

// Inspect accepts an inspector function that has same arguments as the Command.GetMessage
func (mmGetMessage *mCommandMockGetMessage) Inspect(f func(ctx context.Context)) *mCommandMockGetMessage {
	if mmGetMessage.mock.inspectFuncGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("Inspect function is already set for CommandMock.GetMessage")
	}

	mmGetMessage.mock.inspectFuncGetMessage = f

	return mmGetMessage
}

// Return sets up results that will be returned by Command.GetMessage
func (mmGetMessage *mCommandMockGetMessage) Return(s1 string, err error) *CommandMock {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("CommandMock.GetMessage mock is already set by Set")
	}

	if mmGetMessage.defaultExpectation == nil {
		mmGetMessage.defaultExpectation = &CommandMockGetMessageExpectation{mock: mmGetMessage.mock}
	}
	mmGetMessage.defaultExpectation.results = &CommandMockGetMessageResults{s1, err}
	mmGetMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetMessage.mock
}

// Set uses given function f to mock the Command.GetMessage method
func (mmGetMessage *mCommandMockGetMessage) Set(f func(ctx context.Context) (s1 string, err error)) *CommandMock {
	if mmGetMessage.defaultExpectation != nil {
		mmGetMessage.mock.t.Fatalf("Default expectation is already set for the Command.GetMessage method")
	}

	if len(mmGetMessage.expectations) > 0 {
		mmGetMessage.mock.t.Fatalf("Some expectations are already set for the Command.GetMessage method")
	}

	mmGetMessage.mock.funcGetMessage = f
	mmGetMessage.mock.funcGetMessageOrigin = minimock.CallerInfo(1)
	return mmGetMessage.mock
}

// When sets expectation for the Command.GetMessage which will trigger the result defined by the following
// Then helper
func (mmGetMessage *mCommandMockGetMessage) When(ctx context.Context) *CommandMockGetMessageExpectation {
	if mmGetMessage.mock.funcGetMessage != nil {
		mmGetMessage.mock.t.Fatalf("CommandMock.GetMessage mock is already set by Set")
	}

	expectation := &CommandMockGetMessageExpectation{
		mock:               mmGetMessage.mock,
		params:             &CommandMockGetMessageParams{ctx},
		expectationOrigins: CommandMockGetMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetMessage.expectations = append(mmGetMessage.expectations, expectation)
	return expectation
}

// Then sets up Command.GetMessage return parameters for the expectation previously defined by the When method
func (e *CommandMockGetMessageExpectation) Then(s1 string, err error) *CommandMock {
	e.results = &CommandMockGetMessageResults{s1, err}
	return e.mock
}

// Times sets number of times Command.GetMessage should be invoked
func (mmGetMessage *mCommandMockGetMessage) Times(n uint64) *mCommandMockGetMessage {
	if n == 0 {
		mmGetMessage.mock.t.Fatalf("Times of CommandMock.GetMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetMessage.expectedInvocations, n)
	mmGetMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetMessage
}

func (mmGetMessage *mCommandMockGetMessage) invocationsDone() bool {
	if len(mmGetMessage.expectations) == 0 && mmGetMessage.defaultExpectation == nil && mmGetMessage.mock.funcGetMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetMessage.mock.afterGetMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetMessage implements Command
func (mmGetMessage *CommandMock) GetMessage(ctx context.Context) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGetMessage.beforeGetMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMessage.afterGetMessageCounter, 1)

	mmGetMessage.t.Helper()

	if mmGetMessage.inspectFuncGetMessage != nil {
		mmGetMessage.inspectFuncGetMessage(ctx)
	}

	mm_params := CommandMockGetMessageParams{ctx}

	// Record call args
	mmGetMessage.GetMessageMock.mutex.Lock()
	mmGetMessage.GetMessageMock.callArgs = append(mmGetMessage.GetMessageMock.callArgs, &mm_params)
	mmGetMessage.GetMessageMock.mutex.Unlock()

	for _, e := range mmGetMessage.GetMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetMessage.GetMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMessage.GetMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMessage.GetMessageMock.defaultExpectation.params
		mm_want_ptrs := mmGetMessage.GetMessageMock.defaultExpectation.paramPtrs

		mm_got := CommandMockGetMessageParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetMessage.t.Errorf("CommandMock.GetMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetMessage.GetMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMessage.t.Errorf("CommandMock.GetMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetMessage.GetMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMessage.GetMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMessage.t.Fatal("No results are set for the CommandMock.GetMessage")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetMessage.funcGetMessage != nil {
		return mmGetMessage.funcGetMessage(ctx)
	}
	mmGetMessage.t.Fatalf("Unexpected call to CommandMock.GetMessage. %v", ctx)
	return
}

// GetMessageAfterCounter returns a count of finished CommandMock.GetMessage invocations
func (mmGetMessage *CommandMock) GetMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMessage.afterGetMessageCounter)
}

// GetMessageBeforeCounter returns a count of CommandMock.GetMessage invocations
func (mmGetMessage *CommandMock) GetMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMessage.beforeGetMessageCounter)
}

// Calls returns a list of arguments used in each call to CommandMock.GetMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMessage *mCommandMockGetMessage) Calls() []*CommandMockGetMessageParams {
	mmGetMessage.mutex.RLock()

	argCopy := make([]*CommandMockGetMessageParams, len(mmGetMessage.callArgs))
	copy(argCopy, mmGetMessage.callArgs)

	mmGetMessage.mutex.RUnlock()

	return argCopy
}

// MinimockGetMessageDone returns true if the count of the GetMessage invocations corresponds
// the number of defined expectations
func (m *CommandMock) MinimockGetMessageDone() bool {
	if m.GetMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMessageMock.invocationsDone()
}

// MinimockGetMessageInspect logs each unmet expectation
func (m *CommandMock) MinimockGetMessageInspect() {
	for _, e := range m.GetMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CommandMock.GetMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetMessageCounter := mm_atomic.LoadUint64(&m.afterGetMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMessageMock.defaultExpectation != nil && afterGetMessageCounter < 1 {
		if m.GetMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CommandMock.GetMessage at\n%s", m.GetMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CommandMock.GetMessage at\n%s with params: %#v", m.GetMessageMock.defaultExpectation.expectationOrigins.origin, *m.GetMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMessage != nil && afterGetMessageCounter < 1 {
		m.t.Errorf("Expected call to CommandMock.GetMessage at\n%s", m.funcGetMessageOrigin)
	}

	if !m.GetMessageMock.invocationsDone() && afterGetMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to CommandMock.GetMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMessageMock.expectedInvocations), m.GetMessageMock.expectedInvocationsOrigin, afterGetMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CommandMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CommandMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CommandMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetMessageDone()
}
