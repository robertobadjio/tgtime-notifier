// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package telegram

//go:generate minimock -i github.com/robertobadjio/tgtime-notifier/internal/service/notifier/telegram.aggregatorClient -o aggregator_client_mock.go -n AggregatorClientMock -p telegram

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	pb "github.com/robertobadjio/tgtime-aggregator/pkg/api/time_v1"
)

// AggregatorClientMock implements aggregatorClient
type AggregatorClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetTimeSummary          func(ctx context.Context, macAddress string, date string) (gp1 *pb.GetSummaryResponse, err error)
	funcGetTimeSummaryOrigin    string
	inspectFuncGetTimeSummary   func(ctx context.Context, macAddress string, date string)
	afterGetTimeSummaryCounter  uint64
	beforeGetTimeSummaryCounter uint64
	GetTimeSummaryMock          mAggregatorClientMockGetTimeSummary
}

// NewAggregatorClientMock returns a mock for aggregatorClient
func NewAggregatorClientMock(t minimock.Tester) *AggregatorClientMock {
	m := &AggregatorClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetTimeSummaryMock = mAggregatorClientMockGetTimeSummary{mock: m}
	m.GetTimeSummaryMock.callArgs = []*AggregatorClientMockGetTimeSummaryParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAggregatorClientMockGetTimeSummary struct {
	optional           bool
	mock               *AggregatorClientMock
	defaultExpectation *AggregatorClientMockGetTimeSummaryExpectation
	expectations       []*AggregatorClientMockGetTimeSummaryExpectation

	callArgs []*AggregatorClientMockGetTimeSummaryParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// AggregatorClientMockGetTimeSummaryExpectation specifies expectation struct of the aggregatorClient.GetTimeSummary
type AggregatorClientMockGetTimeSummaryExpectation struct {
	mock               *AggregatorClientMock
	params             *AggregatorClientMockGetTimeSummaryParams
	paramPtrs          *AggregatorClientMockGetTimeSummaryParamPtrs
	expectationOrigins AggregatorClientMockGetTimeSummaryExpectationOrigins
	results            *AggregatorClientMockGetTimeSummaryResults
	returnOrigin       string
	Counter            uint64
}

// AggregatorClientMockGetTimeSummaryParams contains parameters of the aggregatorClient.GetTimeSummary
type AggregatorClientMockGetTimeSummaryParams struct {
	ctx        context.Context
	macAddress string
	date       string
}

// AggregatorClientMockGetTimeSummaryParamPtrs contains pointers to parameters of the aggregatorClient.GetTimeSummary
type AggregatorClientMockGetTimeSummaryParamPtrs struct {
	ctx        *context.Context
	macAddress *string
	date       *string
}

// AggregatorClientMockGetTimeSummaryResults contains results of the aggregatorClient.GetTimeSummary
type AggregatorClientMockGetTimeSummaryResults struct {
	gp1 *pb.GetSummaryResponse
	err error
}

// AggregatorClientMockGetTimeSummaryOrigins contains origins of expectations of the aggregatorClient.GetTimeSummary
type AggregatorClientMockGetTimeSummaryExpectationOrigins struct {
	origin           string
	originCtx        string
	originMacAddress string
	originDate       string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) Optional() *mAggregatorClientMockGetTimeSummary {
	mmGetTimeSummary.optional = true
	return mmGetTimeSummary
}

// Expect sets up expected params for aggregatorClient.GetTimeSummary
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) Expect(ctx context.Context, macAddress string, date string) *mAggregatorClientMockGetTimeSummary {
	if mmGetTimeSummary.mock.funcGetTimeSummary != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Set")
	}

	if mmGetTimeSummary.defaultExpectation == nil {
		mmGetTimeSummary.defaultExpectation = &AggregatorClientMockGetTimeSummaryExpectation{}
	}

	if mmGetTimeSummary.defaultExpectation.paramPtrs != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by ExpectParams functions")
	}

	mmGetTimeSummary.defaultExpectation.params = &AggregatorClientMockGetTimeSummaryParams{ctx, macAddress, date}
	mmGetTimeSummary.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetTimeSummary.expectations {
		if minimock.Equal(e.params, mmGetTimeSummary.defaultExpectation.params) {
			mmGetTimeSummary.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetTimeSummary.defaultExpectation.params)
		}
	}

	return mmGetTimeSummary
}

// ExpectCtxParam1 sets up expected param ctx for aggregatorClient.GetTimeSummary
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) ExpectCtxParam1(ctx context.Context) *mAggregatorClientMockGetTimeSummary {
	if mmGetTimeSummary.mock.funcGetTimeSummary != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Set")
	}

	if mmGetTimeSummary.defaultExpectation == nil {
		mmGetTimeSummary.defaultExpectation = &AggregatorClientMockGetTimeSummaryExpectation{}
	}

	if mmGetTimeSummary.defaultExpectation.params != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Expect")
	}

	if mmGetTimeSummary.defaultExpectation.paramPtrs == nil {
		mmGetTimeSummary.defaultExpectation.paramPtrs = &AggregatorClientMockGetTimeSummaryParamPtrs{}
	}
	mmGetTimeSummary.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetTimeSummary.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetTimeSummary
}

// ExpectMacAddressParam2 sets up expected param macAddress for aggregatorClient.GetTimeSummary
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) ExpectMacAddressParam2(macAddress string) *mAggregatorClientMockGetTimeSummary {
	if mmGetTimeSummary.mock.funcGetTimeSummary != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Set")
	}

	if mmGetTimeSummary.defaultExpectation == nil {
		mmGetTimeSummary.defaultExpectation = &AggregatorClientMockGetTimeSummaryExpectation{}
	}

	if mmGetTimeSummary.defaultExpectation.params != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Expect")
	}

	if mmGetTimeSummary.defaultExpectation.paramPtrs == nil {
		mmGetTimeSummary.defaultExpectation.paramPtrs = &AggregatorClientMockGetTimeSummaryParamPtrs{}
	}
	mmGetTimeSummary.defaultExpectation.paramPtrs.macAddress = &macAddress
	mmGetTimeSummary.defaultExpectation.expectationOrigins.originMacAddress = minimock.CallerInfo(1)

	return mmGetTimeSummary
}

// ExpectDateParam3 sets up expected param date for aggregatorClient.GetTimeSummary
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) ExpectDateParam3(date string) *mAggregatorClientMockGetTimeSummary {
	if mmGetTimeSummary.mock.funcGetTimeSummary != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Set")
	}

	if mmGetTimeSummary.defaultExpectation == nil {
		mmGetTimeSummary.defaultExpectation = &AggregatorClientMockGetTimeSummaryExpectation{}
	}

	if mmGetTimeSummary.defaultExpectation.params != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Expect")
	}

	if mmGetTimeSummary.defaultExpectation.paramPtrs == nil {
		mmGetTimeSummary.defaultExpectation.paramPtrs = &AggregatorClientMockGetTimeSummaryParamPtrs{}
	}
	mmGetTimeSummary.defaultExpectation.paramPtrs.date = &date
	mmGetTimeSummary.defaultExpectation.expectationOrigins.originDate = minimock.CallerInfo(1)

	return mmGetTimeSummary
}

// Inspect accepts an inspector function that has same arguments as the aggregatorClient.GetTimeSummary
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) Inspect(f func(ctx context.Context, macAddress string, date string)) *mAggregatorClientMockGetTimeSummary {
	if mmGetTimeSummary.mock.inspectFuncGetTimeSummary != nil {
		mmGetTimeSummary.mock.t.Fatalf("Inspect function is already set for AggregatorClientMock.GetTimeSummary")
	}

	mmGetTimeSummary.mock.inspectFuncGetTimeSummary = f

	return mmGetTimeSummary
}

// Return sets up results that will be returned by aggregatorClient.GetTimeSummary
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) Return(gp1 *pb.GetSummaryResponse, err error) *AggregatorClientMock {
	if mmGetTimeSummary.mock.funcGetTimeSummary != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Set")
	}

	if mmGetTimeSummary.defaultExpectation == nil {
		mmGetTimeSummary.defaultExpectation = &AggregatorClientMockGetTimeSummaryExpectation{mock: mmGetTimeSummary.mock}
	}
	mmGetTimeSummary.defaultExpectation.results = &AggregatorClientMockGetTimeSummaryResults{gp1, err}
	mmGetTimeSummary.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetTimeSummary.mock
}

// Set uses given function f to mock the aggregatorClient.GetTimeSummary method
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) Set(f func(ctx context.Context, macAddress string, date string) (gp1 *pb.GetSummaryResponse, err error)) *AggregatorClientMock {
	if mmGetTimeSummary.defaultExpectation != nil {
		mmGetTimeSummary.mock.t.Fatalf("Default expectation is already set for the aggregatorClient.GetTimeSummary method")
	}

	if len(mmGetTimeSummary.expectations) > 0 {
		mmGetTimeSummary.mock.t.Fatalf("Some expectations are already set for the aggregatorClient.GetTimeSummary method")
	}

	mmGetTimeSummary.mock.funcGetTimeSummary = f
	mmGetTimeSummary.mock.funcGetTimeSummaryOrigin = minimock.CallerInfo(1)
	return mmGetTimeSummary.mock
}

// When sets expectation for the aggregatorClient.GetTimeSummary which will trigger the result defined by the following
// Then helper
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) When(ctx context.Context, macAddress string, date string) *AggregatorClientMockGetTimeSummaryExpectation {
	if mmGetTimeSummary.mock.funcGetTimeSummary != nil {
		mmGetTimeSummary.mock.t.Fatalf("AggregatorClientMock.GetTimeSummary mock is already set by Set")
	}

	expectation := &AggregatorClientMockGetTimeSummaryExpectation{
		mock:               mmGetTimeSummary.mock,
		params:             &AggregatorClientMockGetTimeSummaryParams{ctx, macAddress, date},
		expectationOrigins: AggregatorClientMockGetTimeSummaryExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetTimeSummary.expectations = append(mmGetTimeSummary.expectations, expectation)
	return expectation
}

// Then sets up aggregatorClient.GetTimeSummary return parameters for the expectation previously defined by the When method
func (e *AggregatorClientMockGetTimeSummaryExpectation) Then(gp1 *pb.GetSummaryResponse, err error) *AggregatorClientMock {
	e.results = &AggregatorClientMockGetTimeSummaryResults{gp1, err}
	return e.mock
}

// Times sets number of times aggregatorClient.GetTimeSummary should be invoked
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) Times(n uint64) *mAggregatorClientMockGetTimeSummary {
	if n == 0 {
		mmGetTimeSummary.mock.t.Fatalf("Times of AggregatorClientMock.GetTimeSummary mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetTimeSummary.expectedInvocations, n)
	mmGetTimeSummary.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetTimeSummary
}

func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) invocationsDone() bool {
	if len(mmGetTimeSummary.expectations) == 0 && mmGetTimeSummary.defaultExpectation == nil && mmGetTimeSummary.mock.funcGetTimeSummary == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetTimeSummary.mock.afterGetTimeSummaryCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetTimeSummary.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetTimeSummary implements aggregatorClient
func (mmGetTimeSummary *AggregatorClientMock) GetTimeSummary(ctx context.Context, macAddress string, date string) (gp1 *pb.GetSummaryResponse, err error) {
	mm_atomic.AddUint64(&mmGetTimeSummary.beforeGetTimeSummaryCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTimeSummary.afterGetTimeSummaryCounter, 1)

	mmGetTimeSummary.t.Helper()

	if mmGetTimeSummary.inspectFuncGetTimeSummary != nil {
		mmGetTimeSummary.inspectFuncGetTimeSummary(ctx, macAddress, date)
	}

	mm_params := AggregatorClientMockGetTimeSummaryParams{ctx, macAddress, date}

	// Record call args
	mmGetTimeSummary.GetTimeSummaryMock.mutex.Lock()
	mmGetTimeSummary.GetTimeSummaryMock.callArgs = append(mmGetTimeSummary.GetTimeSummaryMock.callArgs, &mm_params)
	mmGetTimeSummary.GetTimeSummaryMock.mutex.Unlock()

	for _, e := range mmGetTimeSummary.GetTimeSummaryMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation.Counter, 1)
		mm_want := mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation.params
		mm_want_ptrs := mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation.paramPtrs

		mm_got := AggregatorClientMockGetTimeSummaryParams{ctx, macAddress, date}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetTimeSummary.t.Errorf("AggregatorClientMock.GetTimeSummary got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.macAddress != nil && !minimock.Equal(*mm_want_ptrs.macAddress, mm_got.macAddress) {
				mmGetTimeSummary.t.Errorf("AggregatorClientMock.GetTimeSummary got unexpected parameter macAddress, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation.expectationOrigins.originMacAddress, *mm_want_ptrs.macAddress, mm_got.macAddress, minimock.Diff(*mm_want_ptrs.macAddress, mm_got.macAddress))
			}

			if mm_want_ptrs.date != nil && !minimock.Equal(*mm_want_ptrs.date, mm_got.date) {
				mmGetTimeSummary.t.Errorf("AggregatorClientMock.GetTimeSummary got unexpected parameter date, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation.expectationOrigins.originDate, *mm_want_ptrs.date, mm_got.date, minimock.Diff(*mm_want_ptrs.date, mm_got.date))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetTimeSummary.t.Errorf("AggregatorClientMock.GetTimeSummary got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetTimeSummary.GetTimeSummaryMock.defaultExpectation.results
		if mm_results == nil {
			mmGetTimeSummary.t.Fatal("No results are set for the AggregatorClientMock.GetTimeSummary")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetTimeSummary.funcGetTimeSummary != nil {
		return mmGetTimeSummary.funcGetTimeSummary(ctx, macAddress, date)
	}
	mmGetTimeSummary.t.Fatalf("Unexpected call to AggregatorClientMock.GetTimeSummary. %v %v %v", ctx, macAddress, date)
	return
}

// GetTimeSummaryAfterCounter returns a count of finished AggregatorClientMock.GetTimeSummary invocations
func (mmGetTimeSummary *AggregatorClientMock) GetTimeSummaryAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTimeSummary.afterGetTimeSummaryCounter)
}

// GetTimeSummaryBeforeCounter returns a count of AggregatorClientMock.GetTimeSummary invocations
func (mmGetTimeSummary *AggregatorClientMock) GetTimeSummaryBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTimeSummary.beforeGetTimeSummaryCounter)
}

// Calls returns a list of arguments used in each call to AggregatorClientMock.GetTimeSummary.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetTimeSummary *mAggregatorClientMockGetTimeSummary) Calls() []*AggregatorClientMockGetTimeSummaryParams {
	mmGetTimeSummary.mutex.RLock()

	argCopy := make([]*AggregatorClientMockGetTimeSummaryParams, len(mmGetTimeSummary.callArgs))
	copy(argCopy, mmGetTimeSummary.callArgs)

	mmGetTimeSummary.mutex.RUnlock()

	return argCopy
}

// MinimockGetTimeSummaryDone returns true if the count of the GetTimeSummary invocations corresponds
// the number of defined expectations
func (m *AggregatorClientMock) MinimockGetTimeSummaryDone() bool {
	if m.GetTimeSummaryMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetTimeSummaryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetTimeSummaryMock.invocationsDone()
}

// MinimockGetTimeSummaryInspect logs each unmet expectation
func (m *AggregatorClientMock) MinimockGetTimeSummaryInspect() {
	for _, e := range m.GetTimeSummaryMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AggregatorClientMock.GetTimeSummary at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetTimeSummaryCounter := mm_atomic.LoadUint64(&m.afterGetTimeSummaryCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetTimeSummaryMock.defaultExpectation != nil && afterGetTimeSummaryCounter < 1 {
		if m.GetTimeSummaryMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to AggregatorClientMock.GetTimeSummary at\n%s", m.GetTimeSummaryMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to AggregatorClientMock.GetTimeSummary at\n%s with params: %#v", m.GetTimeSummaryMock.defaultExpectation.expectationOrigins.origin, *m.GetTimeSummaryMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTimeSummary != nil && afterGetTimeSummaryCounter < 1 {
		m.t.Errorf("Expected call to AggregatorClientMock.GetTimeSummary at\n%s", m.funcGetTimeSummaryOrigin)
	}

	if !m.GetTimeSummaryMock.invocationsDone() && afterGetTimeSummaryCounter > 0 {
		m.t.Errorf("Expected %d calls to AggregatorClientMock.GetTimeSummary at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetTimeSummaryMock.expectedInvocations), m.GetTimeSummaryMock.expectedInvocationsOrigin, afterGetTimeSummaryCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AggregatorClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetTimeSummaryInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AggregatorClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AggregatorClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetTimeSummaryDone()
}
