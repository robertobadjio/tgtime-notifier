// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package telegram

//go:generate minimock -i github.com/robertobadjio/tgtime-notifier/internal/service/notifier/telegram.apiPBClient -o api_pb_client_mock.go -n ApiPBClientMock -p telegram

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	pbapiv1 "github.com/robertobadjio/tgtime-api/api/v1/pb/api"
)

// ApiPBClientMock implements apiPBClient
type ApiPBClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetUserByTelegramID          func(ctx context.Context, telegramID int64) (gp1 *pbapiv1.GetUserByTelegramIdResponse, err error)
	funcGetUserByTelegramIDOrigin    string
	inspectFuncGetUserByTelegramID   func(ctx context.Context, telegramID int64)
	afterGetUserByTelegramIDCounter  uint64
	beforeGetUserByTelegramIDCounter uint64
	GetUserByTelegramIDMock          mApiPBClientMockGetUserByTelegramID
}

// NewApiPBClientMock returns a mock for apiPBClient
func NewApiPBClientMock(t minimock.Tester) *ApiPBClientMock {
	m := &ApiPBClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetUserByTelegramIDMock = mApiPBClientMockGetUserByTelegramID{mock: m}
	m.GetUserByTelegramIDMock.callArgs = []*ApiPBClientMockGetUserByTelegramIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mApiPBClientMockGetUserByTelegramID struct {
	optional           bool
	mock               *ApiPBClientMock
	defaultExpectation *ApiPBClientMockGetUserByTelegramIDExpectation
	expectations       []*ApiPBClientMockGetUserByTelegramIDExpectation

	callArgs []*ApiPBClientMockGetUserByTelegramIDParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ApiPBClientMockGetUserByTelegramIDExpectation specifies expectation struct of the apiPBClient.GetUserByTelegramID
type ApiPBClientMockGetUserByTelegramIDExpectation struct {
	mock               *ApiPBClientMock
	params             *ApiPBClientMockGetUserByTelegramIDParams
	paramPtrs          *ApiPBClientMockGetUserByTelegramIDParamPtrs
	expectationOrigins ApiPBClientMockGetUserByTelegramIDExpectationOrigins
	results            *ApiPBClientMockGetUserByTelegramIDResults
	returnOrigin       string
	Counter            uint64
}

// ApiPBClientMockGetUserByTelegramIDParams contains parameters of the apiPBClient.GetUserByTelegramID
type ApiPBClientMockGetUserByTelegramIDParams struct {
	ctx        context.Context
	telegramID int64
}

// ApiPBClientMockGetUserByTelegramIDParamPtrs contains pointers to parameters of the apiPBClient.GetUserByTelegramID
type ApiPBClientMockGetUserByTelegramIDParamPtrs struct {
	ctx        *context.Context
	telegramID *int64
}

// ApiPBClientMockGetUserByTelegramIDResults contains results of the apiPBClient.GetUserByTelegramID
type ApiPBClientMockGetUserByTelegramIDResults struct {
	gp1 *pbapiv1.GetUserByTelegramIdResponse
	err error
}

// ApiPBClientMockGetUserByTelegramIDOrigins contains origins of expectations of the apiPBClient.GetUserByTelegramID
type ApiPBClientMockGetUserByTelegramIDExpectationOrigins struct {
	origin           string
	originCtx        string
	originTelegramID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) Optional() *mApiPBClientMockGetUserByTelegramID {
	mmGetUserByTelegramID.optional = true
	return mmGetUserByTelegramID
}

// Expect sets up expected params for apiPBClient.GetUserByTelegramID
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) Expect(ctx context.Context, telegramID int64) *mApiPBClientMockGetUserByTelegramID {
	if mmGetUserByTelegramID.mock.funcGetUserByTelegramID != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("ApiPBClientMock.GetUserByTelegramID mock is already set by Set")
	}

	if mmGetUserByTelegramID.defaultExpectation == nil {
		mmGetUserByTelegramID.defaultExpectation = &ApiPBClientMockGetUserByTelegramIDExpectation{}
	}

	if mmGetUserByTelegramID.defaultExpectation.paramPtrs != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("ApiPBClientMock.GetUserByTelegramID mock is already set by ExpectParams functions")
	}

	mmGetUserByTelegramID.defaultExpectation.params = &ApiPBClientMockGetUserByTelegramIDParams{ctx, telegramID}
	mmGetUserByTelegramID.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetUserByTelegramID.expectations {
		if minimock.Equal(e.params, mmGetUserByTelegramID.defaultExpectation.params) {
			mmGetUserByTelegramID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByTelegramID.defaultExpectation.params)
		}
	}

	return mmGetUserByTelegramID
}

// ExpectCtxParam1 sets up expected param ctx for apiPBClient.GetUserByTelegramID
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) ExpectCtxParam1(ctx context.Context) *mApiPBClientMockGetUserByTelegramID {
	if mmGetUserByTelegramID.mock.funcGetUserByTelegramID != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("ApiPBClientMock.GetUserByTelegramID mock is already set by Set")
	}

	if mmGetUserByTelegramID.defaultExpectation == nil {
		mmGetUserByTelegramID.defaultExpectation = &ApiPBClientMockGetUserByTelegramIDExpectation{}
	}

	if mmGetUserByTelegramID.defaultExpectation.params != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("ApiPBClientMock.GetUserByTelegramID mock is already set by Expect")
	}

	if mmGetUserByTelegramID.defaultExpectation.paramPtrs == nil {
		mmGetUserByTelegramID.defaultExpectation.paramPtrs = &ApiPBClientMockGetUserByTelegramIDParamPtrs{}
	}
	mmGetUserByTelegramID.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetUserByTelegramID.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetUserByTelegramID
}

// ExpectTelegramIDParam2 sets up expected param telegramID for apiPBClient.GetUserByTelegramID
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) ExpectTelegramIDParam2(telegramID int64) *mApiPBClientMockGetUserByTelegramID {
	if mmGetUserByTelegramID.mock.funcGetUserByTelegramID != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("ApiPBClientMock.GetUserByTelegramID mock is already set by Set")
	}

	if mmGetUserByTelegramID.defaultExpectation == nil {
		mmGetUserByTelegramID.defaultExpectation = &ApiPBClientMockGetUserByTelegramIDExpectation{}
	}

	if mmGetUserByTelegramID.defaultExpectation.params != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("ApiPBClientMock.GetUserByTelegramID mock is already set by Expect")
	}

	if mmGetUserByTelegramID.defaultExpectation.paramPtrs == nil {
		mmGetUserByTelegramID.defaultExpectation.paramPtrs = &ApiPBClientMockGetUserByTelegramIDParamPtrs{}
	}
	mmGetUserByTelegramID.defaultExpectation.paramPtrs.telegramID = &telegramID
	mmGetUserByTelegramID.defaultExpectation.expectationOrigins.originTelegramID = minimock.CallerInfo(1)

	return mmGetUserByTelegramID
}

// Inspect accepts an inspector function that has same arguments as the apiPBClient.GetUserByTelegramID
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) Inspect(f func(ctx context.Context, telegramID int64)) *mApiPBClientMockGetUserByTelegramID {
	if mmGetUserByTelegramID.mock.inspectFuncGetUserByTelegramID != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("Inspect function is already set for ApiPBClientMock.GetUserByTelegramID")
	}

	mmGetUserByTelegramID.mock.inspectFuncGetUserByTelegramID = f

	return mmGetUserByTelegramID
}

// Return sets up results that will be returned by apiPBClient.GetUserByTelegramID
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) Return(gp1 *pbapiv1.GetUserByTelegramIdResponse, err error) *ApiPBClientMock {
	if mmGetUserByTelegramID.mock.funcGetUserByTelegramID != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("ApiPBClientMock.GetUserByTelegramID mock is already set by Set")
	}

	if mmGetUserByTelegramID.defaultExpectation == nil {
		mmGetUserByTelegramID.defaultExpectation = &ApiPBClientMockGetUserByTelegramIDExpectation{mock: mmGetUserByTelegramID.mock}
	}
	mmGetUserByTelegramID.defaultExpectation.results = &ApiPBClientMockGetUserByTelegramIDResults{gp1, err}
	mmGetUserByTelegramID.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetUserByTelegramID.mock
}

// Set uses given function f to mock the apiPBClient.GetUserByTelegramID method
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) Set(f func(ctx context.Context, telegramID int64) (gp1 *pbapiv1.GetUserByTelegramIdResponse, err error)) *ApiPBClientMock {
	if mmGetUserByTelegramID.defaultExpectation != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("Default expectation is already set for the apiPBClient.GetUserByTelegramID method")
	}

	if len(mmGetUserByTelegramID.expectations) > 0 {
		mmGetUserByTelegramID.mock.t.Fatalf("Some expectations are already set for the apiPBClient.GetUserByTelegramID method")
	}

	mmGetUserByTelegramID.mock.funcGetUserByTelegramID = f
	mmGetUserByTelegramID.mock.funcGetUserByTelegramIDOrigin = minimock.CallerInfo(1)
	return mmGetUserByTelegramID.mock
}

// When sets expectation for the apiPBClient.GetUserByTelegramID which will trigger the result defined by the following
// Then helper
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) When(ctx context.Context, telegramID int64) *ApiPBClientMockGetUserByTelegramIDExpectation {
	if mmGetUserByTelegramID.mock.funcGetUserByTelegramID != nil {
		mmGetUserByTelegramID.mock.t.Fatalf("ApiPBClientMock.GetUserByTelegramID mock is already set by Set")
	}

	expectation := &ApiPBClientMockGetUserByTelegramIDExpectation{
		mock:               mmGetUserByTelegramID.mock,
		params:             &ApiPBClientMockGetUserByTelegramIDParams{ctx, telegramID},
		expectationOrigins: ApiPBClientMockGetUserByTelegramIDExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetUserByTelegramID.expectations = append(mmGetUserByTelegramID.expectations, expectation)
	return expectation
}

// Then sets up apiPBClient.GetUserByTelegramID return parameters for the expectation previously defined by the When method
func (e *ApiPBClientMockGetUserByTelegramIDExpectation) Then(gp1 *pbapiv1.GetUserByTelegramIdResponse, err error) *ApiPBClientMock {
	e.results = &ApiPBClientMockGetUserByTelegramIDResults{gp1, err}
	return e.mock
}

// Times sets number of times apiPBClient.GetUserByTelegramID should be invoked
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) Times(n uint64) *mApiPBClientMockGetUserByTelegramID {
	if n == 0 {
		mmGetUserByTelegramID.mock.t.Fatalf("Times of ApiPBClientMock.GetUserByTelegramID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetUserByTelegramID.expectedInvocations, n)
	mmGetUserByTelegramID.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetUserByTelegramID
}

func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) invocationsDone() bool {
	if len(mmGetUserByTelegramID.expectations) == 0 && mmGetUserByTelegramID.defaultExpectation == nil && mmGetUserByTelegramID.mock.funcGetUserByTelegramID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetUserByTelegramID.mock.afterGetUserByTelegramIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetUserByTelegramID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetUserByTelegramID implements apiPBClient
func (mmGetUserByTelegramID *ApiPBClientMock) GetUserByTelegramID(ctx context.Context, telegramID int64) (gp1 *pbapiv1.GetUserByTelegramIdResponse, err error) {
	mm_atomic.AddUint64(&mmGetUserByTelegramID.beforeGetUserByTelegramIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByTelegramID.afterGetUserByTelegramIDCounter, 1)

	mmGetUserByTelegramID.t.Helper()

	if mmGetUserByTelegramID.inspectFuncGetUserByTelegramID != nil {
		mmGetUserByTelegramID.inspectFuncGetUserByTelegramID(ctx, telegramID)
	}

	mm_params := ApiPBClientMockGetUserByTelegramIDParams{ctx, telegramID}

	// Record call args
	mmGetUserByTelegramID.GetUserByTelegramIDMock.mutex.Lock()
	mmGetUserByTelegramID.GetUserByTelegramIDMock.callArgs = append(mmGetUserByTelegramID.GetUserByTelegramIDMock.callArgs, &mm_params)
	mmGetUserByTelegramID.GetUserByTelegramIDMock.mutex.Unlock()

	for _, e := range mmGetUserByTelegramID.GetUserByTelegramIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGetUserByTelegramID.GetUserByTelegramIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByTelegramID.GetUserByTelegramIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByTelegramID.GetUserByTelegramIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetUserByTelegramID.GetUserByTelegramIDMock.defaultExpectation.paramPtrs

		mm_got := ApiPBClientMockGetUserByTelegramIDParams{ctx, telegramID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetUserByTelegramID.t.Errorf("ApiPBClientMock.GetUserByTelegramID got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUserByTelegramID.GetUserByTelegramIDMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.telegramID != nil && !minimock.Equal(*mm_want_ptrs.telegramID, mm_got.telegramID) {
				mmGetUserByTelegramID.t.Errorf("ApiPBClientMock.GetUserByTelegramID got unexpected parameter telegramID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetUserByTelegramID.GetUserByTelegramIDMock.defaultExpectation.expectationOrigins.originTelegramID, *mm_want_ptrs.telegramID, mm_got.telegramID, minimock.Diff(*mm_want_ptrs.telegramID, mm_got.telegramID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByTelegramID.t.Errorf("ApiPBClientMock.GetUserByTelegramID got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetUserByTelegramID.GetUserByTelegramIDMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByTelegramID.GetUserByTelegramIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByTelegramID.t.Fatal("No results are set for the ApiPBClientMock.GetUserByTelegramID")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGetUserByTelegramID.funcGetUserByTelegramID != nil {
		return mmGetUserByTelegramID.funcGetUserByTelegramID(ctx, telegramID)
	}
	mmGetUserByTelegramID.t.Fatalf("Unexpected call to ApiPBClientMock.GetUserByTelegramID. %v %v", ctx, telegramID)
	return
}

// GetUserByTelegramIDAfterCounter returns a count of finished ApiPBClientMock.GetUserByTelegramID invocations
func (mmGetUserByTelegramID *ApiPBClientMock) GetUserByTelegramIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByTelegramID.afterGetUserByTelegramIDCounter)
}

// GetUserByTelegramIDBeforeCounter returns a count of ApiPBClientMock.GetUserByTelegramID invocations
func (mmGetUserByTelegramID *ApiPBClientMock) GetUserByTelegramIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByTelegramID.beforeGetUserByTelegramIDCounter)
}

// Calls returns a list of arguments used in each call to ApiPBClientMock.GetUserByTelegramID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByTelegramID *mApiPBClientMockGetUserByTelegramID) Calls() []*ApiPBClientMockGetUserByTelegramIDParams {
	mmGetUserByTelegramID.mutex.RLock()

	argCopy := make([]*ApiPBClientMockGetUserByTelegramIDParams, len(mmGetUserByTelegramID.callArgs))
	copy(argCopy, mmGetUserByTelegramID.callArgs)

	mmGetUserByTelegramID.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByTelegramIDDone returns true if the count of the GetUserByTelegramID invocations corresponds
// the number of defined expectations
func (m *ApiPBClientMock) MinimockGetUserByTelegramIDDone() bool {
	if m.GetUserByTelegramIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetUserByTelegramIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetUserByTelegramIDMock.invocationsDone()
}

// MinimockGetUserByTelegramIDInspect logs each unmet expectation
func (m *ApiPBClientMock) MinimockGetUserByTelegramIDInspect() {
	for _, e := range m.GetUserByTelegramIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ApiPBClientMock.GetUserByTelegramID at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetUserByTelegramIDCounter := mm_atomic.LoadUint64(&m.afterGetUserByTelegramIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByTelegramIDMock.defaultExpectation != nil && afterGetUserByTelegramIDCounter < 1 {
		if m.GetUserByTelegramIDMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ApiPBClientMock.GetUserByTelegramID at\n%s", m.GetUserByTelegramIDMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ApiPBClientMock.GetUserByTelegramID at\n%s with params: %#v", m.GetUserByTelegramIDMock.defaultExpectation.expectationOrigins.origin, *m.GetUserByTelegramIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByTelegramID != nil && afterGetUserByTelegramIDCounter < 1 {
		m.t.Errorf("Expected call to ApiPBClientMock.GetUserByTelegramID at\n%s", m.funcGetUserByTelegramIDOrigin)
	}

	if !m.GetUserByTelegramIDMock.invocationsDone() && afterGetUserByTelegramIDCounter > 0 {
		m.t.Errorf("Expected %d calls to ApiPBClientMock.GetUserByTelegramID at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetUserByTelegramIDMock.expectedInvocations), m.GetUserByTelegramIDMock.expectedInvocationsOrigin, afterGetUserByTelegramIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ApiPBClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetUserByTelegramIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ApiPBClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ApiPBClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetUserByTelegramIDDone()
}
