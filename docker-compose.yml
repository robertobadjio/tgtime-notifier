services:
  app:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
    container_name: tgtime-notifier-app
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
    networks:
      - tgtime-notifier-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${HTTP_PORT}/liveness"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    depends_on:
      tgtime-api:
        condition: service_healthy

  tgtime-api:
    build:
      context: .
      dockerfile: ./docker/tgtime-api/Dockerfile
    command: -serverPort ${TGTIME_API_PORT}
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/initializerJson.json
      MOCKSERVER_LOG_LEVEL: INFO
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
    volumes:
      - ./docker/tgtime-api/config:/config
      - ./docker/tgtime-api/config/mockserver.properties:/config/mockserver.properties
    networks:
      - tgtime-notifier-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${TGTIME_API_PORT}/liveness/probe"]
      interval: 10s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - tgtime-notifier-network

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LOG_RETENTION_MS=10000
      - KAFKA_CLEANUP_POLICY=delete
      - KAFKA_CLEANUP_ENABLE=true
      - KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS=5000
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    networks:
      - tgtime-notifier-network
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 5s
      timeout: 10s
      retries: 10

networks:
  tgtime-notifier-network:
    driver: bridge